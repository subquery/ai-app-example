# Botanix Testnet Quick Start  The goal of this quick start guide is to index all transfers and approval events from the [Wrapped BTC](`0x23a62E7A0b8541b6C217A5a1E750CDb01E954807`) on Botanix Testnet.  <!-- @include: ../snippets/evm-quickstart-reference.md -->  ::: warning Important We use Ethereum packages, runtimes, and handlers (e.g. `@subql/node-ethereum`, `ethereum/Runtime`, and `ethereum/*Hander`) for Botanix Testnet. Since Botanix Testnet is an EVM-compatible, we can use the core Ethereum framework to index it. :::  <!-- @include: ../snippets/evm-manifest-intro.md#level2 -->  As we are indexing all transfers and approvals from the Wrapped BTC contract, the first step is to import the contract abi definition which can be obtained from from any standard [ERC-20 contract](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/). Copy the entire contract ABI and save it as a file called `erc20.abi.json` in the `/abis` directory.  **Update the `datasources` section as follows:**  ```ts dataSources: [     {       kind: EthereumDatasourceKind.Runtime,       startBlock: 4092,       options: {         abi: "erc20",         // This is the contract address for Wrapped BTC         address: "0x23a62E7A0b8541b6C217A5a1E750CDb01E954807",       },       assets: new Map([["erc20", { file: "./abis/erc20.abi.json" }]]),       mapping: {         file: "./dist/index.js",         handlers: [           {             kind: EthereumHandlerKind.Call, // We use ethereum handlers since Botanix Testnet is EVM-compatible             handler: "handleTransaction",             filter: {               /**                * The function can either be the function fragment or signature                * function: '0x095ea7b3'                * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'                */               function: "approve(address spender, uint256 amount)",             },           },           {             kind: EthereumHandlerKind.Event,             handler: "handleLog",             filter: {               /**                * Follows standard log filters https://docs.ethers.io/v5/concepts/events/                * address: "0x60781C2586D68229fde47564546784ab3fACA982"                */               topics: [                 "Transfer(address indexed from, address indexed to, uint256 amount)",               ],             },           },         ],       },     },   ], ```  The above code indicates that you will be running a `handleTransaction` mapping function whenever there is a `approve` method being called on any transaction from the [Wrapped BTC contract](https://blockscout.botanixlabs.dev/address/0x23a62E7A0b8541b6C217A5a1E750CDb01E954807). The code also indicates that you will be running a `handleLog` mapping function whenever there is a `Transfer` event being emitted from the contract.  <!-- @include: ../snippets/ethereum-manifest-note.md -->  <!-- @include: ../snippets/schema-intro.md#level2 -->  Remove all existing entities and update the `schema.graphql` file as follows. Here you can see we are indexing block information such as the id, blockHeight, transfer receiver and transfer sender along with an approvals and all of the attributes related to them (such as owner and spender etc.).  ```graphql type Transfer @entity {   id: ID! # Transaction hash   blockHeight: BigInt   to: String!   from: String!   value: BigInt!   contractAddress: String! }  type Approval @entity {   id: ID! # Transaction hash   blockHeight: BigInt   owner: String!   spender: String!   value: BigInt!   contractAddress: String! } ```  <!-- @include: ../snippets/note-on-entity-relationships.md -->  <!-- @include: ../snippets/evm-codegen.md -->  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; ```  <!-- @include: ../snippets/schema-note.md -->  <!-- @include: ../snippets/mapping-intro.md#level2 -->  Navigate to the default mapping function in the `src/mappings` directory. You will be able to see two exported functions `handleLog` and `handleTransaction`:  ```ts export async function handleLog(log: TransferLog): Promise<void> {   logger.info(`New transfer transaction log at block ${log.blockNumber}`);   assert(log.args, "No log.args");    const transaction = Transfer.create({     id: log.transactionHash,     blockHeight: BigInt(log.blockNumber),     to: log.args.to,     from: log.args.from,     value: log.args.value.toBigInt(),     contractAddress: log.address,   });    await transaction.save(); }  export async function handleTransaction(tx: ApproveTransaction): Promise<void> {   logger.info(`New Approval transaction at block ${tx.blockNumber}`);   assert(tx.args, "No tx.args");    const approval = Approval.create({     id: tx.hash,     owner: tx.from,     spender: await tx.args[0],     value: BigInt(await tx.args[1].toString()),     contractAddress: tx.to,   });    await approval.save(); } ```  The `handleLog` function receives a `log` parameter of type `TransferLog` which includes log data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  The `handleTransaction` function receives a `tx` parameter of type `ApproveTransaction` which includes transaction data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  <!-- @include: ../snippets/ethereum-mapping-note.md -->  <!-- @include: ../snippets/build.md -->  <!-- @include: ../snippets/run-locally.md -->  <!-- @include: ../snippets/query-intro.md -->  ```graphql {   query {     transfers(first: 5, orderBy: VALUE_DESC) {       totalCount       nodes {         id         blockHeight         from         to         value         contractAddress       }     }   } } ```  You will see the result similar to below:  ```json {   "data": {     "query": {       "transfers": {         "totalCount": 686,         "nodes": [           {             "id": "0xc1b046793f22a8897fc7b4d593fe3faacb79f377fff7b128278ddf6ee55071b1",             "blockHeight": "9213",             "from": "0xA4B4cDeC4fE2839d3D3a49Ad5E20c21c01A31091",             "to": "0x22335542E21A5ed8F2B2BbffE922Ce89B293d83a",             "value": "163583946842105263",             "contractAddress": "0x23a62E7A0b8541b6C217A5a1E750CDb01E954807"           },           {             "id": "0x422873df15bf431ee61811b220920d186c7eac7a11cb5013f8f40549543bbef0",             "blockHeight": "9146",             "from": "0xA4B4cDeC4fE2839d3D3a49Ad5E20c21c01A31091",             "to": "0x22335542E21A5ed8F2B2BbffE922Ce89B293d83a",             "value": "100000000000000000",             "contractAddress": "0x23a62E7A0b8541b6C217A5a1E750CDb01E954807"           },           {             "id": "0x8fe9d1843488a43c56c89f5fffb655c75472cabbf5017d593b28abc077eff72b",             "blockHeight": "12937",             "from": "0xA4B4cDeC4fE2839d3D3a49Ad5E20c21c01A31091",             "to": "0xFeB6E805424dBe4815bE71AC65C0C65A34b284d8",             "value": "45218093867054106",             "contractAddress": "0x23a62E7A0b8541b6C217A5a1E750CDb01E954807"           },           {             "id": "0x4f80855ff3f4f065251ca93fcdffe4cb5f25e902c361672acb9f20472da781fa",             "blockHeight": "9395",             "from": "0xA4B4cDeC4fE2839d3D3a49Ad5E20c21c01A31091",             "to": "0x22335542E21A5ed8F2B2BbffE922Ce89B293d83a",             "value": "30000000000000000",             "contractAddress": "0x23a62E7A0b8541b6C217A5a1E750CDb01E954807"           },           {             "id": "0xdbea23dfda25345cf6f96980cb17706d8e6cc6bb59bb5c6e6adccbf7a4e55edb",             "blockHeight": "9403",             "from": "0x22335542E21A5ed8F2B2BbffE922Ce89B293d83a",             "to": "0xA4B4cDeC4fE2839d3D3a49Ad5E20c21c01A31091",             "value": "29892321863886585",             "contractAddress": "0x23a62E7A0b8541b6C217A5a1E750CDb01E954807"           }         ]       }     }   } } ```  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/tree/main/Botanix/botanix-testnet-starter). :::  <!-- @include: ../snippets/whats-next.md -->         É       ≥• 6ñøﬁñê[|îøa
§˛Yw∞øÊó–Cæbü?|©ò}0ÜúøO^'üe∞û?dôq_vkìøR`ËéâñønÕ{®(´ø‚USó)ëøˆU¡¡AÔÉ?ÛÖ⁄Äù¨?4<I¸Çƒ∂?¶âªù$-¢ø"å·‚è?±?sπ∑ﬁDßøçë≤f‡W≤?{úÄ^lÂè?FØ∫pë[?œh˜ ~øyÌt¬“èøwÌπÈ"«¶øÎÒå«V·ö?Ìñ™’”âø`˝Ü&‹mΩ?òæ¯∫û?\ÉEÂ)"ê?,˙·ó?Õ¸ÓF¥Wöø∆Új]√<v?U¸ò<â˚Äøœ	7üéUç?Ò≈¯ﬂ3⁄û?‚á1Ü≈Í≥ø‚x€ÿ.eõø™¡¶x£ôøèN·1—Zò?kjÌ>F«≠øt©êñø ›∫h∂ü?ü∞Ù<‡Åø<;2π≈∫¢øéboª3ôø4¶¿ˇﬂëø]‹™©ø˜/9É˘
™økÈKÄ†ë?„ˇ ˛8Äü?‹∑/ß—“ôøxÌ£ïØø=§Ô†ü ü?°CÅãdôøõ≤ôRF?Y'WF]J°?ßZ˙fù?»‡oZ§øÏNò¨aÒÖøéæ'È±”^øèï-Ã!-±?0ß¸R‹ßø±]˝l˜î?lK@Û	>u?ê'æ‰√m?-Æ3∂æÂØ?øxÃasÂz?^QÑ≥ﬂâø˛±Æ`ã¸røV&>oµ∞?%tDD4ü?ÿ<¿ÛàZu?[Ê±ºdI£ø6˘Õ«,∞åø=LÅ Œ0à?tÎr†@õ?íﬂB!y¢?—ıÅÉΩjø—l¥¢ÅøGäLÈ.√íøóÓiﬂ¿
ß?€"~06≤?*—¸´s~çøÄ£ÍEWcõøË$Y\#Oñ?WÓ©>Œ≤j?¬ÅÛVk±?ˆmß˛X¿Ä?èÍb=/¡ùø∞$AëO¨?C}˙‹9[ øRI@T3ú?0a≥™≈™å?p2Õ˜Kè?Ü• üø”®?≤]~ Ç‘à?&ÓÆ<]©øNd©ü~Ç?rnÚﬂ¨Vöø≠r÷‰´ú?
¶ıæR±ø^‚òë?+È¥∞ü¨ôø7Æ‰NÒ{ø≈)M„ÀÜ|?{¨Æ}‡Æù?6i"Ö´?S›ØDòâô? ≈>j}É?æf⁄z]Ò≥?˛ÉR¯è,î?§LÅyl?ÚÕÂÔ¶ßÑø:’µQ¯«®?ﬁâ˘ºY∏Æø˙p e¢ÙîøÏ»ˆ˘¶ÎÄøçMI€ö¢{øﬁzÍ‰N·≠?’≈•ﬁﬁ+öøègt`i{Ñ?ë=3¢cû?]Bÿêïò?»Q≈¸¯ôø¬s3ˇè„§?Æò·§'ö?¨›ı §q©?óu% +ö§ø†ù€ù∑ø	#?‡VÅë?¨C›#u‰s?7)X%â†ø~ˆLƒïíi?`WÅ,‘´ø√@ﬂç:™?¬Ê√ÉÀíø{ÄL=õÌó?…k ∫$s∞?sö=Ñ|∆´øm~Ù4˝e°øÏ{>V2ö?9L…è¢øa`É©Yö?t≠^N/p?O√ø!∑”ò?'>Á˘Wô?˙) Yó9íø-ÒcÌkî?Í˝N¨∂≥?”j£†?J€b¯4Öø¡1ñ¨4pÇø5=?ƒ∫|ó?ÁmÆív@°øÿëP	@õ?äo;Ñó?[?À7g
æï?¯a[vU~øiu`£&¶•?G·[;ˆêøêçzg8é´?©˚√@´?ª;ùÒû†?ÍÄBB6æ°?ˆsÒTñø±Ìÿ˚ôÈ•ø≠ûY3Æè≠øT®∫ºCŒ†?Ùõ“—‹¨?M|ﬁ"jÅÆ?…oÊ$1ö?èÿB.*•?})*Ö∫Ùôø>.¨FoÎúø1ÓR_†Ë≠ø5éÅ
Å¥?÷·q;R¢?$~§EO†ø\}L÷n‹Ç?ÑWªª2ê?√6h>¨òø* CÄ9§ø•›ÄÄ…N≥øLª ≤ÜøtèÉ¥ƒ°ø©gà˝zí®?ãße>¸	°ø–˜ˇ„ôø)¡,˛ µ´?-l∆úyœ•?ÛY|T≥øûØq?∞øè∏Qπhî?Ó÷¢.í?1BΩ?≥‚b?ËV!HRêá?d@=PÉvéøx¸IBC{pøﬁíìæM’ß?ÚP [≤ü?‡lå N∞?Wmä	báé?u:¯ÿì?ú‹∫^D"¢øz4∞Àç´øR	!˘)s?äYÌÚëj?πñ›˛"§?:û%»ò?Ô«^€¶ø∞5˚ùEò?s©¥?¸nõøFlº„0r¢?VõKÊbPó?Í™neÒ±ã?Ç0mÄ›û,ø¡M Õhä?˘a≈Ç¿ùøeyÿΩu˚¶øIÄ>+®¶øŒG!‚I¥øhv˛izïøë|DTy?«N≠˚Cëøb2T(±?têrXcŒûøÊ§ˇ˛˜T¥?¶‚…Âtñë?S.è`£ﬂ§øª∂Ox2îøë;NÃÿéøuàáï?=hCÏ∂Öã?«Ö¡áz¢ø(}c èEß?WF™˝K xøˆS_YÄøÕZ_#è¿xø0‰9§¢ø_ZX`]O¢?˛$	Ö≤7è?9…^úùø˘éh¢“ˇG?&l¢Cû,¢?…Ã†êøHyª51tø6õ‡˛–ä¢øò|¯°Ó›Øøf‡LÄ‰cøÄ∆!◊A†?É´ËÅ"%û?Û?„_W±?èw¯ñ-|?ß‰A—©¢ø”·bùF¥ø;2C‹=˝^?¡,ù*¥ë?√iE1‘¢ø`É§†ÚÁüø~øê∏	≤?ÄB‚√ë¨ñøÙW~t≈≤ø vΩlÔﬁèø˛«˝üß'°øê-Ù7§?œ–CûyÅf?¬Ym•ß-ïøW2Êˇl„{?Iú\&ü+ëø$W˚Öhæ†øTê¿ñå£?/SÅ˝QÄ†ø≈ÇÎ~›ù?¯âf≥fï?û;áSbæø9•¥Â˘_ò?¨üT^™ø9N◊z[ùø+ÿ©fî6¨?„{ßKƒ0wøÕòÁ`¥…òø)-8êÈat?y˚óó√ú?ú∂Ûª∏¶®ølñ’∏ZŒìø˘P˝ﬁy∏?◊ﬂ–c≠°?∏ßﬁ,ªÊç?çÌMΩÇı°øõañÇ›Ãî?QC8ú6yø≠6\ßÉ?]ŸØÇ≤¢?JiÏ©ô?∆b£≈|§øA….bÈçñ?vÜ2”Ñ®?ø™‡€Á=Å?ª¨J°zîøôïÛÉ¬ô?ßzF„œ>°ø~™√78òøMJA∑ó4±?˚
‹˛∏§àøÑ÷Å{∑‹•?—œ¬[òÉøm£ÊímøibÏJÏV≤øït%Êä?ˇ|±∞ p?”√ò@Üòõ?\÷ﬁVcì?‘D‹ÚJøåø∫oW›Zé•?l&ôº˝V?ˇl<;çß?¸Ô[âMôøºèB'æ°?L5íàØì?Ç◊0˜Ä?nKcÆ?∂˛G∫'éz?î0„;kÜ?»˙z|JWøìØUôaWî?í@≠éø˛|Q>·E≠?Õµ`êë?¢?"ë2πÉû¢øÖçµ6¬ﬂç?îà>kÈ´øBBE
¢ûø50,^∞D™?@aS^`ì¢?t8%ÊzW≤ø\—ˇ’W£ølµ€˛˙†?Êê÷U◊Çøùf|ΩÕ´°ø\'˛ØErø]ú‰Ü`íøµ–Òx*Eñ?r£+Ö˛≤?z'°Ìë?≥ì˛¥
»Ü?%˚1˜⁄}∞ø≈6ìgäø–&Ò|˘Úp?àU
!ÍµîøÿBßà∑íøıÒ0∏ñø¨˛|:é•øP]™Ê˙çø4)˘ °pq?î{F«íøSQÂI·†?L¨ö#¶øﬁ°ƒì?9CFG?áøM(òøØÇèøó‰Ä]MûÆøø*hq˛⁄çøá5X‚H:ó?õÏ´ƒüç?ˇÕ“ËÍõá?®Å|èNÎãø—à#›¿µ{?ä˚U°˝ßø—∂íœã@øãUg€á¡ûøê≤˜B˛"Æ?∆i<ú∂£ø£iÄÚÇf?ﬂÀuÃç?& ˛WFû?B“ã ≈ÕÆ?6‚'‡gí?•∆≈FŸ—j?°à•~gFz?ÿO√@?M_±Å“"èø“(Y√Oî?jpu^5É?8J´Lô?√ÿ‰Çì?Ñˆº°D°?ãµ>T~ø)ƒÈEiFØøoòºè÷àø’^ªÈ”ò?;¯V[b¬Gø[iƒÂ˜ÆøXπ%w˛èøS≥öΩRÁñø5ªN uõøY◊†„.∏Æøùh)Lò?¢|	°ø“$E‰≥µ@?ä3’a≠?AâÚ¨t‹ÑøQ››ó{?∑ÖùHüøü Cà&ÆÅø•væú´ø|?åP4[Ó÷éøoï«ùI–|?Á=u|dß?9∫[î¢øæCÉR‰áøÎœU%W“ä?›œµ(ùUø“)óÙû?ñ(€Ωe§?®1‚ÅOåøµräÈùe≤ø∂∂†Uí?º$ÑF≠f?õ™Fr£`ø »ö¡zñ?RàΩ§¥øKÕy!x◊|ø˜⁄xc»ë?ÿj#_à#©?ìØÄæK¢ø’oz•ôﬂîø∞á”¢n¢øÏ¿≠¬|Æ|?ÈL gñ?Î{&^%ÅøÒÖá8Ôb¶?ÎÀÎÎmÒòø•QN¢»‘â?Q∏TÂˇ5oøÅªo¢˝[w?&gw4MYã?_æ9∫ïø™œYèêª´ø?á…πÏéôø˘"∏ùBÈ8?4xA?± âø!ùu˘©§?C ÚÒdí¶?å9ÇÀ&°ø¿ß]?	€ùørXÁ≠Ç?	Ü∞pKQø£à¡:¢?A†Õ›#Ö?˚@¸@íøâõÊ,“èø{H∫‡∏ö?C9µYâ?ÿØ‚Ór?¨¢âi∂ª?$ó üg©øg8=¶´?éûÊ⁄”≤öøsª*_∂Óóø4Ãa€»ìì?[ Â~#™øM¥Feqë?∑»$¿<¶±?Ü	√˚†øùµÇøxøP7Ìµ‚âø8¨—Ù◊ å?“∑S⁄Â“ëø∑¸—Åˆ4Øøå)	Ê∑Ja?l°@¨Úm?'P£ù˙†?Ã†»˝à¨øy$ï⁄Ëk`øÕ(LŒ?∞ë?Y≠HÚáb?Á1◊]1®?q∑m›¢”àøUÿ±∂Œd∂ø«ìß#µçUø’π˝MÉ˝¥?Z⁄ˇπï§ø»Ù3Ü?À‘Œwä1ô?\P8ÎÓòø˛~W"¶øÈ}„kœ,∞? ∑†W9=öø∑B€%ô?£ÄÂÔ{'¶?„b| °·¥?h∏Y‚èøöê{_ü?Œu@Ãì?	Ã‡7ÜøK=}óab?ò_áö:©møoêË>uø∏∑Yˇô`?ÀhÅ…œ>Öø˛”3€≥ú?ì(ã- ç§øhy-ÀÔêø1cû7C∑?„Ê•yˇ”ñ?Å_·,>h¶?ßS
˘!Ëåøä·øÄ+«òøñ\≈‚7ÖØ?¿À±aÚ´∑øz#<ü÷t™øn–ÇC¥≈°?—Ïˇ!±¢ø˚¸%°ÓôøÜ|»B¨?o	eÜ2˘ãøå˝~îΩ?gµêÂ¸Àòø[FæÒ«¶?[‚8XN.uø÷Út>áA?˙LÕP¢F±?´ÎZøºßû?àD%ûÅÉøùßıLiò?v≈≤∑ô¨ùø Ù®∂£Qàøıª˜
Á'Ä?èΩ§Rhûøç[∑∆bdø\„ñ˚∑≤?@é<…ÉèøÁNUF»Âå?˚∆æπØøWm˜•ê¡ñø·VDƒúåø¢ó√ÅüWÅøe`ºùÊöøx}ÉÇî–†ø¸ñ§f;?æ$ìöø˙nK»-é?CX˙¡⁄«•øΩÔ\;¯YrøÇˆZ8_ÿôøQOz:≤M°ø1œ!€∞¨?
SpÖkFÇ?¸xH.àá?◊ˇæÛ…≥øıGÄÈ†¶?‚˙^‡E°£øÎ=<W˚ò?TfM£˛∑ßøq;Ëù Fû?»C|≥™±øÉ<%aãOÄ?’sπ^&Ã≥ø¯@í•î(cødY¢F0Ùì?*ˇÛH¢?–-yﬁª=ê?í©M_y◊á?‘√Ü] Øì?œ£†„ºb§?‘0‹∂x¢øÃô	`¨jì?·ÈÕ\kÂ£ø„®ã˝-MÇøÃ˙≈S,
∞?âE]Çã…ñ?XhÙ^4∞?[=—º∂ìï?ö”çBû{øã„]Å*f©?1.#∑•ò?µ<@Q?ç∏ìó]L?Ôj•O,i}?≥[.èÛñ?ÅT÷˝Åøﬁ+AÊÕØøÒÍ=G˚fø¯€F÷e?I¯÷¸û?ÍvÑ@îøíÑBŸõ•ø3£;b÷Ü¨?f2ü]Œq?ºíG‰yx®øò∞™b’´?ÿ˚´*±øñˆ∆CÒ¿®?-6i˜πê?'‚;Uhf?Üì—Të∏øhÔ›˝)	¶?Õ∑ûd$¨ø«zLü{·≤øΩWp°?m∆¸Î˚¡Éø∑Büb±í?∑ﬁ¬¸¡†øì:Í∞ºÄøÒ´·>L§ë?q∂˝N:ì?ú4)ﬂº†øâ¨⁄⁄g:¨?≤õwnj8éø ö7V{;§?õ◊AQCõ?V‡˛8nÏöø ]lZ)™ø™&]:≥Kfø9¸¡ê¡®ø{IÁÏ26°øa¶r∑Dé?ƒ}?ê-¥øD¬"c·£?|&–gÃtøm'πﬂ{aìø TVëŸr¥ø
4Áˇ¶éÅ?Éñ€·¢ü¢øºúÅ≠Ïdáøﬁüó˘£øñ=%¡˝{z?£Tœ=|}§?5®ˆjq¢?OG#FüÙÅ?≈yr,s„≤?®ÜÖâkøÛ™Ôxj`ôø“‘$¸{§øuÃX∏’AñøJä‘#)√†ød¥|«jüîø
g@à'eôø¯DF#yêùøWı,Á÷îìøêoÂ_a˛øºVÁΩ÷J±?z¨ï‡?£ß?\Ë∆ÀÙóø„Û‘49∆°ø⁄zÎõ≤’p?öK‚Åì?∞v±ºÌ:§?z€!5ç†?+µj°Üú?π∂CúøÕUÓc◊Üñø“¸1≠Mcõø–\0ÉÙæ•?BŸk¨äë©?{—‰Éï¢ør0&¢Æø‚Wﬁ_íøÏ™†ü2…ïø:ñdÊîøÃLp§Äø‰ç¬›%M?˝nÂÂ„ÏÉ?L„òﬁ^œ¨?Í]ÁüTíøî=(yå*ìøWn◊?óFn?^çLΩ˜£?}YBç.ñ?âì†d±™ø˛	OdΩÉ°øº3„Uúø5»ºsøb?}ﬂ«s´'øR'¥kJ£ø‹˛%Aiºïøü0¥|U≥øıÆÕgû≠?æÔ∆òÂÅ?_Å˚oy?˘ª0ˇb±?S¬b¿—®øk.≥ﬂE%ê?˙xΩ;ˇdñø¿±¿√^â?ŸëR4˙ñøIfb…b?f8˜ïø-÷#~cøê˛•†¶øº*,≈IÚåøä€ë†ª¢ø†'Ò˚á?¥æíıÂ¢ø`‹6!Á¢ø
ˆ9 B¶øÛv8E= öøˇAß\Ö? #æ¯7?±F)`ºòí?ô◊œjö⁄±ø¨È˚"†s?5Ø‡:£ô?[|ÈqÍ¢ød°ºHŒçøèoÍa:=®?s¿—‰ìøËVbíÆVøÔúòª∑û≤?=KÎ ¬äø¯
†Rº£øÈÕ˜?ˇæ´øÎê†ö¿‰ñ?úôÏ·√”¨?Ï˚†…&BÑ?£›ÎÕŒàøç’Aπ»ò¶øü®ü‡©øG±ÂÆàéø|eP ‘Û©?ˆ¥0¸¡o§?Ä¢O7í¸°?Õë?_Mz£øÉu:ïÆéè?Vm{ﬁ4M≠ø?|†‚&Ø?‡¶Éè"ûø$m_hèøS_⁄Ù¢?%Ω4Éø.øiÄ&Põø∏Xmÿò“à?µsÕ5íç?_πÄ≈Q®?ËX‡V:¶ø-∑5õ'‘|øú˜ıˇN≥û?ﬂõgkÀ Åø¡˙À¥§ø¬ˇØî?¸X)∂›∞øÏmØ‹=òøœá◊–F?œáç–‘çâ?ÿí˜é˜Z?îH¬ï´?È¶^	utø'Q´øêóø!ê ú,íøπà\a€Qï?ÓÑø∫≥?&„ô∂–ñ?K‚√$Zøô›±›ﬂŒ§?Î_wù€Ì?c[°pøAå?‡i  ≤ºù?qüá†ãÇµøπù]8º†øÿuòƒì|ø≤mÕ-ﬂ¿ï?ôÀè˙äøü‘n&l`ëø∫µ3ÈBÓ†?8-èmÕ·Ñ?%…è“Nx?¡‰í˚Ö?8=ú~X±øn}ùC5ˇØø•Í™ÇIÿ°?É              ì                      # Botanix Testnet Quick Start  The goal of this quick start guidª8      ˚8      # Botanix Testnet Quick Start  The goal of this quick start guie9      K9                      ≥8             ˚8             K9             v   
content ˇˇˇˇˇˇˇˇˇ*string8
3vector ˇˇˇˇˇˇˇˇˇ*fixed_size_list:double:7688j
lance0.17.0z
lance0.1x   õs ìq*l
0 ˇˇˇˇˇˇˇˇˇ*struct

null_count*int648
	min_value*string8
	max_value*string8 €r:         LANC