# Archway Quick Start  The goal of this quick start guide is to index all [Archway contract metadata](https://docs.archway.io/developers/rewards/managing-rewards#contract-metadata) as well as all rewards paid out to contract developers.  <!-- @include: ../snippets/cosmos-quickstart-reference.md -->  ::: tip The final code of this project can be found [here](https://github.com/subquery/cosmos-subql-starter/tree/main/Archway/archway-starter). :::  <!-- @include: ../snippets/cosmos-manifest-intro.md#level2 -->  ```ts {   dataSources: [     {       kind: CosmosDatasourceKind.Runtime,       startBlock: 1338,       mapping: {         file: "./dist/index.js",         handlers: [           {             handler: "handleRewardsWithdrawEvent",             kind: CosmosHandlerKind.Event,             filter: {               type: "archway.rewards.v1.RewardsWithdrawEvent",               messageFilter: {                 type: "/archway.rewards.v1.MsgWithdrawRewards",               },               /*                 contractCall field can be specified here too                 values: # A set of key/value pairs that are present in the message data                 contract: "juno1v99ehkuetkpf0yxdry8ce92yeqaeaa7lyxr2aagkesrw67wcsn8qxpxay0"               */             },           },           {             handler: "handleSetContractMetadata",             kind: CosmosHandlerKind.Message,             filter: {               /*                 Filter to only messages with the MsgSetContractMetadata function call                 e.g. https://archway.explorers.guru/transaction/EBEE24728FCDA79EF167625D66F438236ED17579CAA7229A562C5AB84608B5A4               */               type: "/archway.rewards.v1.MsgSetContractMetadata",             },           },         ],       },     },   ], } ```  The above code defines that you will be running two handlers. A `handleRewardsWithdrawEvent` handler which will be triggered when a `RewardsWithdrawEvent` type is encountered on a `MsgWithdrawRewards` messageFilter type and a `handleSetContractMetadata` handler which will be triggered when a `MsgSetContractMetadata` type is encountered.  <!-- @include: ../snippets/cosmos-manifest-note.md -->  <!-- @include: ../snippets/schema-intro.md#level2 -->  Update the `schema.graphql` file as follows. In this project, since we are indexing all [Archway's contract metadata](https://docs.archway.io/developers/rewards/managing-rewards#contract-metadata) as well as all rewards paid to contract developers, we define one entity for each to record each instance of this. Each entity has a number of properties, including id, blockheight, transaction hash and the timestamp, we are also indexing contract, owner and reward addresses.  ```graphql type ContractMetadata @entity {   id: ID! # contractAddress   createdBlockHeight: BigInt!   createdDate: Date!   createdTxHash: String!   contractAddress: String!   ownerAddress: String!   rewardsAddress: String! }  type RewardWithdrawl @entity {   id: ID!   blockHeight: BigInt!   date: Date!   txHash: String!   rewardAddress: String!   denom: String!   amount: BigInt! } ```  <!-- @include: ../snippets/note-on-entity-relationships.md -->  <!-- @include: ../snippets/cosmos-codegen.md -->  <!-- @include: ../snippets/schema-note.md -->  <!-- @include: ../snippets/mapping-intro.md#level2 -->  Navigate to the default mapping function in the `src/mappings` directory and update your mapping files to match the following (**note the additional imports**):  ```ts import { CosmosEvent, CosmosMessage } from "@subql/types-cosmos"; import { ContractMetadata, RewardWithdrawl } from "../types"; import { MsgSetContractMetadata } from "../types/proto-interfaces/archway/rewards/v1/tx";  export async function handleSetContractMetadata(   msg: CosmosMessage<MsgSetContractMetadata>, ): Promise<void> {   // Example https://archway.explorers.guru/transaction/485EC908712CCDC0D65918F0E8E90E291D32720F2D0C691CCC055544B98C14A1   logger.info(     `New Set contract metadata at block ${msg.block.header.height.toString()}`,   );    // contract metadata can be set and updated on the same contract call   let contractMetadataRecord = await ContractMetadata.get(     msg.msg.decodedMsg.metadata.contractAddress,   );   if (!contractMetadataRecord) {     // we are creating a new one     contractMetadataRecord = ContractMetadata.create({       id: msg.msg.decodedMsg.metadata.contractAddress,       createdBlockHeight: BigInt(msg.block.block.header.height),       createdDate: new Date(msg.block.header.time.toISOString()),       createdTxHash: msg.tx.hash,       contractAddress: msg.msg.decodedMsg.metadata.contractAddress,       ownerAddress:         msg.msg.decodedMsg.metadata.ownerAddress ||         msg.msg.decodedMsg.senderAddress,       rewardsAddress: msg.msg.decodedMsg.metadata.rewardsAddress,     });   } else {     // we are updating     contractMetadataRecord.contractAddress =       msg.msg.decodedMsg.metadata.contractAddress;     contractMetadataRecord.ownerAddress =       msg.msg.decodedMsg.metadata.ownerAddress;     contractMetadataRecord.rewardsAddress =       msg.msg.decodedMsg.metadata.rewardsAddress;   }   // Save the data   await contractMetadataRecord.save(); }  export async function handleRewardsWithdrawEvent(   event: CosmosEvent, ): Promise<void> {   // Example https://archway.explorers.guru/transaction/CB3AF6F8F38A6628A22E45CAD178D435D42D5A1CAAC431D16CBE64557F2CBEC3   logger.info(     `New Reward Withdraw event at block ${event.block.header.height.toString()}`,   );    // Attributes are stored as key value pairs   const rewardAddress = event.event.attributes.find(     (a) => a.key === "reward_address",   )?.value;   const rewardsString = event.event.attributes.find(     (a) => a.key === "rewards",   )?.value;    if (rewardAddress && rewardsString) {     const rewards: { denom: string; amount: string }[] =       JSON.parse(rewardsString);      rewards.forEach(async (reward, index) => {       const rewardWithdrawlEvent = RewardWithdrawl.create({         id: `${event.tx.hash}-${event.msg.idx}-${event.idx}-${index}`,         blockHeight: BigInt(event.block.block.header.height),         date: new Date(event.block.header.time.toISOString()),         txHash: event.tx.hash,         rewardAddress,         denom: reward.denom,         amount: BigInt(reward.amount),       });        await rewardWithdrawlEvent.save();     });   } } ```  Here we have two functions, `handleSetContractMetadata` and `handleRewardsWithdrawEvent` handler functions which were defined in the manifest file.  `handleSetContractMetadata` receives a message of type `CosmosMessage<MsgSetContractMetadataMessage>` , logs the blockheight of the message to the console for debugging purposes and then attempts to obtain the various metadata such as the contractAddress, ownerAddress and rewardsAddress from the `msg` parameter that was passed into the function. Note that the contract address is used as a unique id.  The `handleRewardsWithdrawEvent` function works in a similar way where the event of type `CosmosEvent` is passed into this function and then we look for certain event attributes to index by searching through the attribute keys. Finally, the fields of the `RewardWithdrawl` entity are populated appropriately.  <!-- @include: ../snippets/cosmos-mapping-note.md -->  <!-- @include: ../snippets/build.md -->  <!-- @include: ../snippets/run-locally.md -->  <!-- @include: ../snippets/query-intro.md -->  ```graphql query {   contractMetadata(first: 5) {     nodes {       id       ownerAddress       rewardsAddress       contractAddress     }   }   rewardWithdrawls(first: 5, orderBy: AMOUNT_DESC) {     nodes {       id       date       amount       denom       rewardAddress     }   } } ```  You will see the result similar to below:  ```json {   "data": {     "contractMetadata": {       "totalCount": 2,       "nodes": [         {           "id": "archway1275jwjpktae4y4y0cdq274a2m0jnpekhttnfuljm6n59wnpyd62qppqxq0",           "ownerAddress": "archway1n7d4c52knwqqkw9j975ranknkp4fn3we0unrp6",           "rewardsAddress": "archway1n7d4c52knwqqkw9j975ranknkp4fn3we0unrp6",           "contractAddress": "archway1275jwjpktae4y4y0cdq274a2m0jnpekhttnfuljm6n59wnpyd62qppqxq0"         },         {           "id": "archway1cf5rq0amcl5m2flqrtl4gw2mdl3zdec9vlp5hfa9hgxlwnmrlazsdycu4l",           "ownerAddress": "archway1n7d4c52knwqqkw9j975ranknkp4fn3we0unrp6",           "rewardsAddress": "archway1n7d4c52knwqqkw9j975ranknkp4fn3we0unrp6",           "contractAddress": "archway1cf5rq0amcl5m2flqrtl4gw2mdl3zdec9vlp5hfa9hgxlwnmrlazsdycu4l"         }       ]     },     "rewardWithdrawls": {       "nodes": []     }   } } ```  <!-- @include: ../snippets/whats-next.md -->         "      æañ«Üç?®üøNº¢ø#Æ[çŒêø(ﬁ¿Ï∑¢ø‚ŒôuEw`ø[Ú˘⁄ìΩñ?∫ˇtuZ∆t?ãﬁÊ„ì{®?HYE”gtx?<ª¡sñì?πΩo?äÅ°?VÇÊÔµ“ï?Óüü‹ò§?»x_X®|ò?º∆ùM≠|ø áQ®XIûø≈Vˆ{gÇ?‘§ Ê`Ï≠øIÍyAàá´?	˝⁄gÜn}?¡ÿJÃ©≤?§›*Äf©ø±î≥‘.ì?‚^Ùp]åòøµL+*á; ?t€∂÷¥ﬁâø	ÊHd®U¢øuœe"wø.Z9·I˛°øê’…NG´ø©d¡Cü/ú?Ö∫û°Âd°ø÷ùYÿÙå?˚môÛKzøMÂa_∫báøçÏÙ è‘è?∞¬¨û3láøov"√U^ì?ﬁû˘Nèõ?n˛$\¸Wøπ¡l‹D(îø˝wG)ï∞?VŸ|˛©(≤ø·<≈?¶î£?6GÎ‚¨?†¬~@Å¢ø¥ßG7ñ?ü©``W°øõ¢¥£ì¶?!ä3múå?<Zd¨Ab?f1#O°q?Ô§âr´ø·"°tº©ø"‘òRèØ?V/abcÜø+JF$√W≠?^R£˙Hˆê?k«yÄëç?f‚˝àƒ‹|?Í›∞Q¸ä?|fX´ï?ﬁú¥Í∂áø÷C…ÄXÆ?óóáBáù§?â‡Í∆‹ßø!v°¿$âø®h¥nÊõ?ç√†≤$ê?Ã-J\	’†øda_çdü?î˚€m07¶øñ≥ÈõC8£?ló≤„Òzß?\\Ö¬◊õ? (¸=§$§ø\re{†íøpKjº>ê?–K#Åø±‡Î\2=¢?“î±b7∫ê?$5…ú"¨ø@dôó&≥?ÆWﬂ`r™?˘ÛøÇ<?Q™tÌxà?)‰ÉènøΩiNÏsøaÓ≈^î?≠Àﬂs†?ﬁwq˛é?Jùô√bí©?ÄÜPë ñ?~}é>œg¶?⁄∏Q¶…s≥øú˚Ö €ûøk]Èi…´ø‡ábv?<•?:Ê~1®øM™œ8Åßêø≤Ç ï“îø¿ÒhOÌïøK€lj®j∑?ƒâf†]~ò?”f øLN≤?∏œ˜A Íñø‡I€]?{öøÁŒÛwT‘ô?ò∫e¸úødá•?®?!PV<ê£øﬂ‚ü!5–µ?,EU¿˚≤¢?Up≤ÏÕò∞øVñg¨ù+Åø∑]Æ`{øv)î÷ˆÆuøÍC˚~à™øD÷/úH?«1ÃËÀ˚±ø¿{¢F|ÇëøΩ¸1x[s?gÈˆ—*¨åøÈﬁ≈&ÚWíø=ä. q}¢øåâL˛ÄÓw?ÑÙê †–∞ølòCÄCê?∫ﬂ€”YVØ?fÆ¬Ûàø\©¿˘oÜû?æiB∞•ëømA+¬†?hFª·©wø0'Ô:◊ãc?5ÍÒ‡∆‰ï?3“v?≥ì°øhßˆ)îè?“v¢›NFò?‘vœ^÷Ù©?{•ƒ_ß¨?´Ob•º5êø±Òh¸%fø‚ü;@5∑iø-9rÕ≤aàøt˙Q?5¨øWÏUÇ öñ?≥X%πE^ôøÁ[HHoÉø´¿¥õ%p™?‹:ÓJÅª≤?8˘ û∫?›‚»†fä°?ãMm°tô?æDôfÍÄ?∫kk9àø[ÑÄÅ¬ŒàøÂÛƒR®óâøß%*QYôø7ÈbE†	üøxlôFr}¢?>œ}©Sì?B˘°#–òôøL•¿~_é∞?jëô}±îø
zπô´øMk≤ uË®øqlÁB}™?Ω⁄^∆•é?¢2’˛îK§?I)P⁄òîøª´˚ ˚ù?∫_º!∏äñ?ï4VÕ£?I{∂ Ò±Ö? §ûÿJï?Ù/CtÏ°?ÚÂÒÛ`âølù_dg©õ?≈<»>
œ•ø≤(k"”§§?ï LÙKö?{¥@‘‡§?x•Ÿ˙Ò∞É?ı/ﬁùl˛??phZ˙Åøêø∂≤G(Ùû?ö;ä∞≈Ä?ãwû}á–ØøØ∂∏í&óøJ!Èd°?ï¯‘ò≠H¢ø«lTùëÂìø_†*˙—›éø©nf_ˆ≈^ø≈6-°Pâ¨ø◊◊çPîç?;o•œıÜ?éc˚˚R`§?·†µâ0—±?Îë ù•?|ñJÏò¬≤øÈNÍ™ƒe±øú_F{øÚHcÑUîÖ?ˆ0ÓÂ¬q™?]WΩî"wø¡^À•ùëøÇà_Í›kø∂ÜÔPV¢ø©ñ≈$¢/[?3¢Òö†ä?≠äT>"´™øyçª|üøDBC„Ø†?3Aôß›ÖøŒ3yÉ?_’˚ªÆ«≠øC|yd ç¥øÛBûBEÃu?Øx†ÔŸö?‰0+#¨¢?/5&Í#u?Wlï0AEøŒñˆÖLDc?˚rÔ¨†Å?JO+az∂†ø#U-LS¬°ø¿B§ÆŒî≤ø≥(™Ü<ë?¬Ω¿Ì“ùøá‡vp…‘≥øºT =Ìà•?ü¯¬HU1r?©æ»∂ˇÉ?È‚iCÇø÷ ôËùø9DDÄø◊ïø˘5_<ìø™Â‹ÿ∫p?™/ÚÇÌˇä?ø{ˆE
±ë?ü8V#®y?â=ÁÄ∫ñ?(Ì≤æG†øÑ.·–[<¶øµ¸7d@Lüøó”Öµ˘ïø±2Ç‹1¥ô?©W9–¶å?—∫(„Ë˝Y?Oﬂ!	Ü?∑’êﬁéuëøØûj_Ñ£?BLŒfºñ?˙rÙ§ø…1∫ˆ‰çøBﬂµEW§?4ıRbÎ⁄ù?∂‘≥Ö˜´ø∑ò¿)É’≥?úÔØ7îN®ø@π∆óÎïó?øX˝-€ßø¬Z8?èÖ ““´E?b—~ô?˝πÀÚ3˝£ø∑ÌqbÏ›•?˜Ê8®ﬁôø·qû±∏≥øDGY\o∂?&Q/¯4'≥?\ ;¡•?8∞…ÿÿ>á?Æi	ÚÊÇÑøTv¶BœuxøÉ6∫¸Áf¢øÌÿÄ˜≤zøTØt°fõø•¨ïø1∫z?$…∏QÄâøps2äH¡ç?Â3>W^?‘ˇOñøaEÂ›ì≤°?`˙‚Pî°?ﬁ{—ÅY_û?XïÊˇñ?`KA
†øÖF∫„pç?èYπ¡ó\†?›™¯zO…ùøH{
 ‡ëøg&\¬˙ã?∆” <B£?ªŸœA∏?ZáπŸ•™eøﬂ0„¡7ï?gÊ∞òd&´øEInkàÖøœJvF=?ú?ù>+˛)Ñ?èvúE•øòæ`zãÜøÓ„ÄÇ?µ"Ω_3E?{M03Ù´ø1¸u·Êÿ†?!ÃO?‚™?ˆ&ãùK§øéG	˜SÆáø”$„ﬁïûøajbπYGè?LN=]Õyø…Öeî∞4âøEg‚V§?\≥©{„Úüø¨Ω·´µ?˜ì0„;ìøπ=UF¢äøü7OùŸ∫l?π◊0‡∏Œï?±Óµv≠u?3õÄ€sø2lqÊá¨î?/(÷ ‡f?J$ÚŸπ™?•≈Ckfóø+ÏŸ€|Æø=J.∏¥§ø°·ª7 «Ä?S‘p¸öøœ≤Bôˇ´øS›‡¢”.gø‡„D¢mà£?áËn`ÙëB?ºãg8¥¥úøé⁄¬»“TÅø§ÂæÓW∞?Xü∑ wÎú?Niüºˇ˜ßø_kÁ‚Qô?«Ü>¿2üøªE≈ uYZøﬂ¬nc©±´?›±oƒÊùøÎs@@.Øø÷€,:ıkø®1•76êø\“D‰cìö?›Iö¯–)èøóUŒö¸oâ?∆vWs	Ràøã*N{k|ø(NX\»ï£ø¯“ﬁW5ô?ƒe$a0ñ©øi¨yeIF´?WG[Éa:ßø<ÕÃC€nx?πpΩ˘O/°?Y!ÿ˝“æè?—8·g‚âø†ÖC§„•?äBf	´?©HÌî˙Òà?„ﬂí‹îû?tûyÖzô?îc≈¿‡˘u?pÛˆÇw;†?Hï›sóø”CüUáXò?](YÅ3éëø D'osoÖø	¢⁄©7ë?®˘MO/©ø±¸õ…ó°øOÓ˛NãîøÚÅW™è∞≠?}´@¢†?Å2|˙æn°?¿ªKònëøò√ßf˙êøfw‘⁄®?_/Ñ≈ó°?ƒùÿ1ùÑ?Î.öﬂz^°?˝=Ω¡3{¨øÙ`ˇ3Rªø‚;Â\Ä9ó?jt¬‹“êóø¥Wkù¬éöøâŸyÆ˛ú?-Åf† ≤ø=SÖîtløˆ⁄fÜøÛÅ”qÎ$£ø1k"f]Ä?*zÙGóÖê?$‘S~.'®ø@^B•´ø˙¢È^∫Xß?eÁ¢^Fjáø◊∫ö]s•?›c·∑ﬂó?*S≈>ÃÿkøDZCÔ±øË_IÙ]
r?∂ËaÀD®ø°\"09büøéüÖ}-:q?Xm;√ç¡¢ø˛‡OUØø ≈iü∆qëø’ÁÓcö#§?Ü≈M≤z,ñ?ß>JõtøIfX9r¨®ø-}u \Ü?Èi‘–vû?πî§
∆†?4≤pÑÈë?äö)¢ﬂmhø+¯º]ïqø|n«©î]K?‰î~óYQùø˚{Áñ0µ?TLkÙÊGí?ëòpMYÅ?ŒC®}3däøÒZ?ÖeàøÖ>n=◊wm?0vπTîø^LœÇ£ø)Ó1æSÙ•?ÛJì√ ±`?  U/∫äø0BÖﬁsD∂?8ã¥‡á{üø€°ƒ[•±?8©ÅIû©°ø˛Í≈ﬁ¯Àêøª◊7öùÒá?ºTy7•?	çN ?èâ?-5≤ìòv?ïÃº9â?9öö9aëø{’»2ÌúøI:ù@ÂSØ?8åºã{óøk3FX°øddè∞^•ø˘Œ≠/T¶?FŒªH>öøÑòˇ,m±øÄ<5C~ò?UhÉ¿àÖ£?ßø£5"Úá?Å∂5`x¢?t‘ {…ú?ŒwΩ"bƒ¶øﬂï{Ü[ùøÔåêcÊ`ßø€¿€ãÅÿûø!ÿÜƒà£?Ÿ)“‘Q™ø‘	áÊ
g?ãÏèü©±ñ?ºΩÖ$úñøà˛ø†;w¶?hÕ,ï˘?Æø|nƒ:%ÖqøGbb/◊åøE°y¡&πá?%± §Ÿùø<ŸÕå~4†ø71˘¶∂¬ñ?∏éAåØ¢ø>òßÇpVÉ?(µ∆âwûøÔ3gΩ±ø^Ha¿çÚ§ø#?ôÅıxîøŸw6≈í[É?∫ÍˇÒeoÉøÎ®jÇ®˚íøœ*%ô√ê?-T‡_b˛†?'≤ˆÇM‡p?âÿÊÙò?‚ã_·˛v?"`‹ƒí?NeùV5xøvÑøû0⁄£ø`⁄Ó °&•ø√;‰Y°?`≥ë(
≠ê?Úó≥ éÖè?
+ƒUâøNC$®πìîø…«Ó%ßøQ⁄Ÿ_èÏñøS÷ç| Ä´?∫Y„˚¿gød“¯ËÅM•ø£Ü«bïø˘YΩßò°ñøó›$ïPB?∑\¢≤Ì¨ø'GdÃ/öø!™2ÑJ˘©?;†£å≥?∑sä#IÔ∂?¿yU∂ÙF? -®svWøöìñkÇw?¢òºf>≥ø∑d£Ω£?≈+°üœûÄ?4HZÎ.E?S™&ÉV≠øÉÂ=òyÑø˚3e¢f£øFG„%?s?ùÙXLì?¢ÄCa}'≤øÏÈ„…ò?.Ù¢¥GxøûXmn^õø!Ü }zÖt?÷˙Ä/ëøT≥¿;÷úeø†¨ÀRóé?˝£Îôêú•øL[V|Äø[{<Äáöìøw?ó>ÆÏÜøÒ<+ˇóxRø)Â∞Y „ïø∑…í[àiøt ó39á?g"∞1°?ÿèu∫Ò√ñøâ∞“æhxüø~4Ayƒç∞ø¿!∆˛¡¶ï?±$ÚΩºâêø∂{¡èÉ?,‚«⁄◊hî?ˇÇ+@ﬁ"≠øt00eørë?tê| ÷üôø
<À¬À“qø‹w+úªïÖøD2!<ìcöøÖ¸ƒÂûàø‘ÕÛ‚ßõ?ñQ„‡˝±âø\`ÍB∏®?®HLâ†∑?ßZMœ¢î?ü≤œ†˜ø=ê',√∞ø˚€†!‹óìøŒ≠ºV’⁄äø*ªâÔ˛W£ø&Í‹µ™®?ÜÖ≈n¿c•?és)«)â?ßπYﬂg,•ø8fœ!MêøÔÏê:∏vù?;g ¬Îv?9	°Öú|? x2¢.˛ÄøSAf„òóâ?I·æ1´GÉ?¯3ÀÑ˜Ü?^uÁ ˆ¢?ﬁ˙v3Á≤øá÷ó`…ïøÀÛ∫'
Ráø,æ»ßÕÈæ◊S‡°~ñ?7€ÿ‹z?•~Ê≈ÏŸ©?6FÃOÆ?˙‡zÈ-ÎÄ?åÓŸ≈≠?À∂û‰∏öõø•âù≤[í?È‹Â	!sã?§âr«mƒõ?†Z‰ÍU?gõgaY≠°ø≥NΩ∑ø‡:µÈæR|ø|Ãª$≠Ñ?>ÕÍô5„äøI
˜çY=ÜøLﬂåwÓπ?∏∆ö£$™ïøZ˚\r˝Æøu˘ﬁ¯=^≤?<∫y˘âBå?õèJ5‹∞?∂ÓÕn≠°?K¿Œû‚píø”r ˙Òí?î<©øˆ}¢?ì˛‚•›Äø_Âã‡∏±yøSu>çí≠?mΩ~?7_ßøƒ¸9qmønL∑;W”ûø$y©6
ŸÅ?r#˚ÖáR?G˛
‡ uøÄ¶ÓbK£û?z†”DbEøD5ﬁÉ˚ÙÑø÷Èı…è?¡™õáIöø’ "&¬ôø@∑ûÄi∫zøpüµÿv•ñø<81ASU?PÌ‚”°øœx≤¥¢øZjC8öøìÊ€˜≤1îøY gÍßøñèe@D
î?YÔ¬^9R?áÀ?êB´?$œX®Û∞ïøU¢øA´?Ú“C:l?^ø‹˛«œã?WhilÑÖàøÜµÁËßÓ≥?2 úÀ‰ëøW€õæ§•ø«-7/Ü&Äø*CÂ˜¢?D◊ËIW∏é?ã˚÷!˝†øî¨ª`#µ?$;«dó∆î?µ{py◊ôëø´æ⁄\3<X?ˆ2ëü{y°øÄ÷M@K¢?"\±;†ø>»}nî?√}â2äíøæ.úå«†øn˙K<¥Pôø›ÁÉ§Kl?1VW‚Zë?äc/§[`§øVEˇû4·®?B¨ƒ]9Rßøk7∞ı™¶?-ÕŒ?†ø‹ÀË†àø‹r¢i†?µŒlÃ±wøî/GvB≤?RÈ_F<œüøˆ\ƒ˚ö§ø¿%VˇMôø8VÃÇ5@¢?5 ±ØLÜø3åÎz ≥pøÏ@‚∆I™?dΩÎH»Åø3`â:ÖÚñøIÀó|8°ø≠ÿyÅ4Hrøœ{eƒ≤¬˜>«‚¶"Ô˛C?¯ï∏¢U¨§øÿä∆r¸d}øªE˝Å¥˜®?í^P∂≥uq?HùÉﬁP5îøfﬂﬁCn§?B≈å~°8´ø!pÇAb¶?Ñp¿?âıµøQ˘˝πmÅÇ?FëΩ˜öízø≈yr,s•øZÃı;tøÚ∞ó@&&©øAzqÅb•øõ>ÈDÇïøÔSú=¨Dú?€Ú6€Åﬂü?Lè"Bésê?%6'Hœ!¡øß«Vöëê?xÛÏ£g;U?â7|§?f!ÆZ°aû?ìàIË…]ïøÉî ~ã°ø◊Îd"êÄ?q‹s™∆\ü?√{*ÅvÇôøcÚR&?&ü?AEÈ‹z∑|ø
Ré°1öø®R‹=lÂVø+x2Å êøï+†v¬åøΩøÊ¡Çåø⁄µE⁄¨løjíZSõøL·í˙Í^öøírK9ÃàúøÛﬁΩHì?MM˛˛ˇ≈∏?åöÁ<ÓQkø<˛≤Kπöè?i<œßßÚÆø9E&dÌçøπ)	|äã†øn˛€<@£ø¸RÕBØî?¥åò¸Ï±øg<¯&Ÿ,≠øäƒ§¬OQñ?UúQê+7©øµ;¿øøt©:yÀ¥ÖøÑ≈• ˚ìø @An.Ä?ì©Cßëï?!;ïèò?íŒûWIù?`Öh€)î?À…YòÅø»ìÊá¯$∏?í¢ ÖŸ£?Â.!bÏD^?¶p·ô ^ô?ít0W÷°?ﬁ∂*".4?:^æé0†?{gmÄΩµñøZ8‘ÂPcõøu€2û”≤øó»GÉ¬=°?ŸÂ!tLÌ°?Eüäy(öO??Ã˛U™?£HÈ©@©?zPã£$;e?ç¿¬√¶?ÿDá<Yúëøˆˆò\M´ø¥e‰¬gèø-O,_≥6´ø"             "                     # Archway Quick Start  The goal of this quick start guide is to E:      Ö:      # Archway Quick Start  The goal of this quick start guide is to!ï:      ’:                      =:             Ö:             ’:             v   
content ˇˇˇˇˇˇˇˇˇ*string8
3vector ˇˇˇˇˇˇˇˇˇ*fixed_size_list:double:7688j
lance0.17.0z
lance0.1x   •v ùt*l
0 ˇˇˇˇˇˇˇˇˇ*struct

null_count*int648
	min_value*string8
	max_value*string8 Âuü;         LANC