# Bitcoin EVM Canary Network Quick Start  The goal of this quick start guide is to index all transfers and approval events from the [Wrapped BTC](https://scan-canary.bevm.io/address/0x09Ff8E49D0EA411A3422ed95E8f5497D4241F532) on BEVM Canary Network.  <!-- @include: ../snippets/evm-quickstart-reference.md -->  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/tree/main/BEVM/bevm-canary-starter). :::  We use Ethereum packages, runtimes, and handlers (e.g. `@subql/node-ethereum`, `ethereum/Runtime`, and `ethereum/*Hander`) for BEVM Canary Network. Since BEVM is an EVM-compatible layer-2 scaling solution, we can use the core Ethereum framework to index it.  <!-- @include: ../snippets/evm-manifest-intro.md#level2 -->  As we are indexing all transfers and approvals from the Wrapped BTC contract on BEVM Canary Network, the first step is to import the contract abi definition which can be obtained from from any standard [ERC-20 contract](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/). Copy the entire contract ABI and save it as a file called `erc20.abi.json` in the `/abis` directory.  **Update the `datasources` section as follows:**  ```ts {   dataSources: [     {       kind: EthereumDatasourceKind.Runtime,       startBlock: 9680021,       options: {         // Must be a key of assets         abi: "erc20",         // This is the contract address for Wrapped BTC https://scan-canary.bevm.io/address/0x09Ff8E49D0EA411A3422ed95E8f5497D4241F532         address: "0x09Ff8E49D0EA411A3422ed95E8f5497D4241F532",       },       assets: new Map([["erc20", { file: "./abis/erc20.abi.json" }]]),       mapping: {         file: "./dist/index.js",         handlers: [           {             kind: EthereumHandlerKind.Call,             handler: "handleTransaction",             filter: {               /**                * The function can either be the function fragment or signature                * function: '0x095ea7b3'                * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'                */               function: "approve(address spender, uint256 rawAmount)",             },           },           {             kind: EthereumHandlerKind.Event,             handler: "handleLog",             filter: {               /**                * Follows standard log filters https://docs.ethers.io/v5/concepts/events/                * address: "0x60781C2586D68229fde47564546784ab3fACA982"                */               topics: [                 "Transfer(address indexed from, address indexed to, uint256 amount)",               ],             },           },         ],       },     },   ], } ```  The above code indicates that you will be running a `handleTransaction` mapping function whenever there is a `approve` method being called on any transaction from the [Wrapped BTC Token](https://scan-canary.bevm.io/address/0x09Ff8E49D0EA411A3422ed95E8f5497D4241F532) on BEVM's Canary Network.  The code also indicates that you will be running a `handleLog` mapping function whenever there is a `Transfer` event being emitted from the [Wrapped BTC Token](https://scan-canary.bevm.io/address/0x09Ff8E49D0EA411A3422ed95E8f5497D4241F532) on BEVM's Canary Network.  <!-- @include: ../snippets/ethereum-manifest-note.md -->  <!-- @include: ../snippets/schema-intro.md#level2 -->  Remove all existing entities and update the `schema.graphql` file as follows. Here you can see we are indexing block information such as the id, blockHeight, transfer receiver and transfer sender along with an approvals and all of the attributes related to them (such as owner and spender etc.).  ```graphql type Transfer @entity {   id: ID! # Transaction hash   blockHeight: BigInt   to: String!   from: String!   value: BigInt!   contractAddress: String! }  type Approval @entity {   id: ID! # Transaction hash   blockHeight: BigInt   owner: String!   spender: String!   value: BigInt!   contractAddress: String! } ```  <!-- @include: ../snippets/note-on-entity-relationships.md -->  <!-- @include: ../snippets/evm-codegen.md -->  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; ```  <!-- @include: ../snippets/schema-note.md -->  <!-- @include: ../snippets/mapping-intro.md#level2 -->  Navigate to the default mapping function in the `src/mappings` directory. You will be able to see two exported functions `handleLog` and `handleTransaction`:  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; import assert from "assert";  export async function handleLog(log: TransferLog): Promise<void> {   logger.info(`New transfer transaction log at block ${log.blockNumber}`);   assert(log.args, "No log.args");    const transaction = Transfer.create({     id: log.transactionHash,     blockHeight: BigInt(log.blockNumber),     to: log.args.to,     from: log.args.from,     value: log.args.value.toBigInt(),     contractAddress: log.address,   });    await transaction.save(); }  export async function handleTransaction(tx: ApproveTransaction): Promise<void> {   logger.info(`New Approval transaction at block ${tx.blockNumber}`);   assert(tx.args, "No tx.args");    const approval = Approval.create({     id: tx.hash,     owner: tx.from,     spender: await tx.args[0],     value: BigInt(await tx.args[1].toString()),     contractAddress: tx.to,   });    await approval.save(); } ```  The `handleLog` function receives a `log` parameter of type `TransferLog` which includes log data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  The `handleTransaction` function receives a `tx` parameter of type `ApproveTransaction` which includes transaction data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  <!-- @include: ../snippets/ethereum-mapping-note.md -->  <!-- @include: ../snippets/build.md -->  <!-- @include: ../snippets/run-locally.md -->  <!-- @include: ../snippets/query-intro.md -->  ```graphql # Write your query or mutation here {   query {     transfers(first: 5, orderBy: VALUE_DESC) {       totalCount       nodes {         id         blockHeight         from         to         value         contractAddress       }     }   } } ```  You will see the result similar to below:  ```json {   "data": {     "query": {       "transfers": {         "totalCount": 5,         "nodes": [           {             "id": "0x625fd9f365a1601486c4176bc34cf0fdf04bf06b2393fd5dd43e8dd7a62d9ec5",             "blockHeight": "53",             "from": "0x0000000000000000000000000000000000000000",             "to": "0xb680c8F33f058163185AB6121F7582BAb57Ef8a7",             "value": "1000000000000000000000000",             "contractAddress": "0x28687c2A4638149745A0999D523f813f63b4786F"           },           {             "id": "0x32057c64d795a7f919925082b9cdc885e307e3a4590377154d746beadc557d3e",             "blockHeight": "62",             "from": "0xb680c8F33f058163185AB6121F7582BAb57Ef8a7",             "to": "0xCa8c45FE7FEDc3922266A1964cD8B8D29946A6A7",             "value": "300000000000000000000",             "contractAddress": "0x28687c2A4638149745A0999D523f813f63b4786F"           },           {             "id": "0xc591997f3217f6dfb6d4dad244126ad4ce245234fe452339b5ba8ad4d4264bdc",             "blockHeight": "66",             "from": "0xCa8c45FE7FEDc3922266A1964cD8B8D29946A6A7",             "to": "0xb21aBf688A6bE0975134a41e73bf2c8Da111fF0d",             "value": "50000000000000000000",             "contractAddress": "0x28687c2A4638149745A0999D523f813f63b4786F"           },           {             "id": "0x1e29daac0434ad4936391e7ba439146ecd9ff9d65869436d466a8e48963e420a",             "blockHeight": "67",             "from": "0xCa8c45FE7FEDc3922266A1964cD8B8D29946A6A7",             "to": "0xe42A2ADF3BEe1c195f4D72410421ad7908388A6a",             "value": "50000000000000000000",             "contractAddress": "0x28687c2A4638149745A0999D523f813f63b4786F"           },           {             "id": "0x73e95b32fe50daf7d0480a7dbd3005fcf22007ebff82fc6fa06a0c606783a0e3",             "blockHeight": "68",             "from": "0xe42A2ADF3BEe1c195f4D72410421ad7908388A6a",             "to": "0x6F715c294Dd78BB11aeB0817B44E2a0b06e3A0B4",             "value": "1000000000000000000",             "contractAddress": "0x28687c2A4638149745A0999D523f813f63b4786F"           }         ]       }     }   } } ```  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/tree/main/BEVM/bevm-canary-starter). :::  <!-- @include: ../snippets/whats-next.md -->         Ê"      Î«˚xµ ê?ÖﬂPo{øø¢E∂Û˝‘…øÀA√O¢ëønÁDÄ®;¨?XÌà≠0é?EØ«√…ùîøÉ<Ö\©gøòL°ÏG?j∑oKjºzøˇv≥ËòQvøHJ›Bµ?‰µ‰M´?	°ªÿ?Eõ?Î£e:˙≥Å?í/f ÷Ë´øho◊Ë(Ióø Oˇ˛9qØøÏ§Qêæöé?©^+_üR°?;ãŸ∆~øî|‚å£îøWTûÚM?¥6ü–qâÅ?‡•˝I€—?€˙~ù?Ê65^'Êú?≤˘ä˛hÈ£?“ÓﬁÒ™øö=¸∞díødNa»fà?JÖ?ìXqøò\99K‚w?π≠àı°§øatŸÂ‰Äø[¶pN6/úø8*L£v4w?7rºÜ	8ê?p°%ÑøÊU  æ„£øTƒI‡¶Ì}?f©ËT°Åø˜Áæådø¶U«ﬂÔhø&únΩÃŒÆ?—(ç3Æáø≥‚¬-§?]ûs\23î?mzµ{py£?sJÓ¸Çø '›ˆ:íøÁjÀÉk#ïøÿ“î~qíÇøóT&b5âØø;ówØo±?¿Óy†CP°?ÛIºvHµ™?”∫pîzÅ?äÙj^üB|?-1hWÒÉø†b2€i˘ñ?´)Ê•†?’ˇíÑﬂÆúøªsÈﬁµ¨?(X(Aõˆ§?Kô·c†øÿ(_Y4ñø^"◊ÄT≠?-∆¯‰Ïìá?+:4Z~HÜøÎlGø´¨?ø'~ÏY?Áæ§J˜Á¶?*¨–≠è?õ‰é—åø˚∏›õD\õ?Q¡í' êøÓ&ê√t‚ïø]Õ´@Ü?≠~oJÆüÄ?˚HB	–B†?ÆËà‹	ôø˜ ¥!≥?ëˆﬂıí?ﬂË¢¢cgÆ?SR{üﬂáø~È‡•C√í?5Õ;‹èø(ÏQ°Ç®øƒ≈∆∆ ò?&fV£ô÷vø,>Ñ?c)ô?ÔVºØœ°?U˚¬≠?„¥TúrûØø‹ÀÚãqì?À˘£È__?j≥˚ü
§?≈f≤E≠øØ•”¸)<™øaÌK›e$Çø˝∆ÎÇ@µi?Ö˜x»d÷Ü?ıäÎ;fpßøïÁ®@π/∞?(ûﬁÖ‡ è?+è÷õ@wøF b‘Ãê?PJ¢n“†ø^—î:Tïê?ƒò±øäm&œÃî?⁄è!ãd?:€€ùø¢UwvCdbø7]G·ûø⁄G§õ4™?ö5ﬁAﬂ"¶øÃíÁóaè?’†˝Çº¢¢?¨4”$véøñ®(®Úáòø´ó¢ê?Û≈ ® ¶?&zÆ)oÀ¢øú,úAœ®¨?_ÕÌùR◊§øU¡ûHhL)?h‘·¿bí?\∫ØÓKBÅøFX˘
wô?#ri[óøh¸ZT0?∆€⁄Ap?ù˚ô‰¡¬ù?êëao∞?A˜9ÉÂ›oø&‰:¸‰üø#k–AﬁE|?ÅlÇ=`˝á?'*ïúÖ–™?∆Mi[V„iø—ê‚˝g∂ï?∫˘AeùøùQÎ‰©öÇøHU÷‡ƒ*£øŒÉ[A©?©®∏y¸A°øíM|ú£øR≈ä£=!ï?óe‡dA†?Ù∫èÌ∆Ã£?´#r∫_Éøp_y#ÙÑ?˙2·/†?ﬁïˇæ∂Êßøpêèdˆ\øÿR6mYs?ú∞Ÿû>ë?ìÉö†‘˛ô?`¨‹¸†›†?$ßã!ÙƒsøUa∞E∞øârK¶h∑ñ?üÎr2îø5K]çG™ø@Ü"¶Jk?&¨KïA¨?É∂·“I†?∫ÆÊ†Nò?ÓP†ë ®ø≠wMÇñ©ø∂Á∞˝è§ø© „ÕÀìøõm_!"ß?≈©Z˚–?ñø†ùCÅç◊ü?∂ÒH8˘óøZ@$ ôv?»"ä©øª» ◊q?≠XDQ^¢ø	=+‚¬§?Ô)®ƒOô?t¿ÚCLY°øõVLù.(§ø+˛å^Ol†?:sæ¡ﬂ{ûøÖQ°ûd…∞ø>›è«K∏ùøÑÜüDÛîøJ76˘5´Å?Ìy‡^˜(£øƒ¿ÁEıÔìø1í¡zqßø‰ê¢à£øîº[’i•?’›Ì åaø?pï'v™?ûKèöøßZMœ¢p?–[/íøk+ÑBı¶øü!ﬂO‘lzøıöÅ>Oßøà>ä »Ö£?∂KA’Ìéé?ÅˇCÄ'ªÄ?öuúúé˘Qøc+¡Ãy?Ö!¥M∫?¬IÅ¢™ïøe EÑòÆ†øÌ`ì‡≈nw?.%ÈüÇÒó?†ùCÅç◊óø”‡]˛®%îø÷ëüd›Øø7›‡*˛¨øÉ∂ü ê?…åÔ?ΩÖ?ºuC‚¢?≤€∏‹òRñøªè’µr¢ø„\¿T˛®?W˜{úHú?e¸W“aÑøÇß5rÇ€óøHVˇô°íø.Bop†?ÙbÈ¬ñæúø¨√ó™0ç∑ø$Iåu‹§?¨Ròıà? ¯«&°?@”„1@†?gA±‡A]ï?yﬁ‹KY¢?.ke9>óg?8ü√Gá1Ñ?-r…®Ê•?.¢§¬√†?Îw33ÀOé?∞Y'¢õø„º~!·´øÑ†£∑eø⁄¥ÿA≥X°øô9Úz°ø∂&A'zò?¡ﬁ≠níÆ?,ÙÒkL—wø.È§ŒöøÚ\ ñl©?+$OH!ù?Bîﬁ "Å°?T?b P·ßø[+Å*Œ†ø*‘ØÅh>®?®qPà°â?ƒ˙≥›PõøÎ{w•ù?¿È≈üîàëøwEo?Äô? m„∆†øxŸ‚€:°øW˝`Ã’°øıÄª‰fUëø)∑∞ºÇùø,Ò4$‰á?>G¯ü{]£øzñ¶\o§ønÇÛ“‚∆†?Û&)*«÷é?ﬁW∫¬àkß?≈àØïèøµT¬9A†ïøP«–¢Xò?@W‡T9ÉøB‚˚;›ïøvÛ\¯$å?ƒÍ90Sorøçä˝:wàÅøﬁùEáqKöøgÜÖA6x?Râú“ÇñàøKÏ_À=Æ?*%HãÒï?Â û)°å?!˛1yIv?2g∏,|é?±6é§ïú?VÏG|¬®hø·ü{kjóøEÕ 3π£?ﬂ ˝ﬁ˝diøæk@›pú?nÛkêÓåπ?w@*ã„Äøå8·Å®°?Øî|$ŸÆäø}5
¿tóñ?(”^ æ4ÖøÖ⁄g|¸1¨?|\∂˛ﬂ÷r?I#Úüf/ú?Päw¸Óà°øf94Ál©?©ç˘üM%ìøπ@›E:Æ?^U∂Bjpôø
CÊöàöø_ Ó9 ö?pÂ;‰•¶øù“E3‰≥?Ä_?û?h¶øœ—”¶Œß?°Ó®÷gs°?+1ggÂÄ?[êÛN7≠?^S≥öø˝˜¸
{’Ä?#≤Í•ø0Æö‚œ¬ú?aD¡›pW´øÀE¥—ƒ1äøh\©‚™?Ö»»&0NYøÜΩê€ºö?È}ó›â}øx÷Çü∑ˇ£ø]†b
[øOT€Ú6ë?ebN‚¿#R?E”bª>†ø.„Ä?˜Cê?êg a€LÆ?<Q¥†géøíÉ0º4sàø>¨‹∞òcøÇ\ûH(±?í_yoê9§?y-‹JìÄø¥ÊÄäŒó?,A x)Øµøu»Ó~Ï`î?µxí#ÜÂá?UN*œ	Ü?•8√eRø:^±!`ˆû?ø®m[Eìê??\ãy†øˆ[\_˚4Ñ?Ùk-ƒ—Ú†øvÖíWTµöø´~¿⁄ÃıZ?—=€ñb?Xq.Ó‘ñ´?”∂∫ÃK&Ä?Z«BBÖªc?∏*QÄ¨úø}vÊ<hß?P‹_™ËëøPdÑv£?ZÚs°ƒwéøw˙Ë§\πÖøˆèﬁ†Xœ¢?uV%…'ü?âûŒÙñõÖøÂ!ê°2©?ü7MSè*~øóÄöÖ63tøZ^T≥P0åø√Û1£Håî?$KàÁ‹Uä?±ND®	õ?ûM€?√}ø™—,∑ø0∫ÙàÉøª˙œüÿ8•ø˝≥L™©qÇø *Si≠?ô®dTßpÖø ≥ûÛgÄ?WÀøÒõ?.·Á˜±z?Ã¡‹ƒä{?Àôó
ƒ«Ñøft—‚]M=øcÆ»aêy?¬í®†m¯wøñ∫Œ √d£øj¿*[G¸ñø˛·¨]åßøàÄÃô∞ßàø∂ì:aø∞ìø-K„3≥xÄø<N¸πò?”∫pîzïøz•>&ÿ”Äøk™}jo~?ê{N°øQö–õøF©ø/Ö¯°ÅAê?x*ÂW°∏õø˜á|Énê?›Ø?ﬂœVï?≠í2#h>î?y‡JBI≠ø*∏>˝~i•?â(òƒh<Ç?F&’<ê?>∫–d§?:C»Œîøƒì›ÃËG£ø}mﬂûE¡ê?ı76u˝í?|Æ¢~ò6≤?i¨#eê]áø3∫¨WÀ|ïøXÏΩ ñqøp6A«S˛ó?4∑zÏôù?'Øâ]øÜÜøÖ§ÓÅXa•?1µ=+}¶øm ≠˙pQÑ?¡©&¿dnú?∫åˇ ¢?Ùï•u“˝ãø)ïÑ^¥øŸGtΩ◊ä†øzJd•ù(é?„d–Öà?¢%´¸¬Ä?"†©tGzøﬂÏ7\©<ì?äUüÖÊ}ø‹gyD£í?«æûéKEÑ?dÕ`=¨?∏Yi@õ?˚wºÒÊ¢ø3cÿ‚ÃÉø˛ö±
…9Ö?*é‚†≠¶?®w
}äæ?Xm@|G*´?¥”¿£N≠øvF8Ü0ôøı ⁄9ÇYø2lvüAë?l€ı√ë?`˝Ö∑%pø§‘—≥Qò?…Ç—∏?IÙü&—àø9≠‘:ﬁ£æ}d˛«≈ì?àØ~Ö/¿†?]èCv>ù?(¯øÜTô?»1€˘ï?›ÙÄ‹ÚOöø£:—95Sò?ÅÍià-kYø›&’œõøg2Å˙Mcé?–1_ﬂ ì£ø„∞ˇ˛•?BóÏØâíØ?sÕbÂ?¨ø˙X^ní?H]wbÚ‡¨? ^⁄c.î?∑ù©cá?j∫èΩç∂ñøÅ¬‡gJUñø√QÂ¿ÉòøˆﬁEÉ°?Å»Z√ÿ#øÌ◊È|Çñ?so46*&•øCóm+™øJ+á¥øW±¯îøAú®!Åq†?¢Ø(>°Kñ?a≈F¨ƒ§?Å¢&∏`¬ô?m`√u{?CÒ◊"q®z?åz∆a3ó?—ï∆7-ë?Î5®ÀPãøÒ±ÅïøRp?´ùT@Iù§øÂìxÌêj£ø≈≠}_.rõ?
9Xø^»o?≠z0ë!≥éø™ÅÌËî?√ˆ0Éc•?yÂŒ‰íøœØd…GKhøeÅ7#—k•?T	ØZ"‚ìøÿhs{Õõêøa”ÁN4±øHTEDsï¥ø’˜ØÊﬂ≤C?ÇÁZãÅ;•ø]‹C~{U#?ÎÜ3‡®Ï•?ˇèŸz8™?j≈qø«âÆ?Ònü4Xa∞ø≈˝†^ã>¢?^öˇπ•øZpla	∞©øk€(ô9∞¢?W^áyuë?Àö(ß]ôøÜ<≠õÖOúø™π˝nëÊïøéz∏çm•ø-Õ≠VcÖ?"Ddííøì˝Û4`ê™øD˚7≥Ü £?ùÅπ®"ÕRø√Ωga•;ô?ıÖöerèø·Ë@Ω[Å?
$Ó“ã¢øÙÓŸÑ≈Ú`øZØ=AœW§ø%ã.ÅÒí°ø– Rï?TˆΩÏb?üç‡oIHß?(Õ?*`ë?ª≈M€∞>n?K´÷Ò£øèF,Éù+qø'√¥Óˆì?*ı«‹˛Zëø#ÿ<7+≥ø6B-pëøø¸≥æˇëíø,Aô©ΩöøÓ≤O:p†?<h4¡âK∏øD∑ÒtøM´UÅ{∞øãp¢|íRö?ÏaØ§ø+7°∑òøÒ˛∆>Àjìøá~ñ|&ûø; c˚ £ø6$Õ£Ø?©‹IÊ¢?JÏØ^U¶?Ä2Qzbzïø®ôB„°·tøœBù±¨øˇ‡	ﬁâøvo≠E˜Îgø1–î!∑Ùí?‡ó·‹≤Ö©?;q˜AØ¢ôø˝•a¿u¥ø‚Ò˚# îø$.¢—•îø»Àëå?ú◊^ïZ[?\SA@uø§P~°3®á?ÛÉ`Îÿ¶ø„
Z_òøºùut˘b∞?6⁄¬ßøq ∂µÄ.|?°ûÇ"ä?)óhæ∫í¨ø0ì%ÛÎú?q<2e∆,öø‹s.ˇ Ô¨øÍ–“›¡ƒ©?’#TC˜π¶øâHÙQœç?ç}Â≥Áî?âom¢1ãøÔ\0øeqc"¡ò?ùÊ˘‡pwö?~ï◊•°°úø°©íE˙Çøi?≠˝¯¶íø´Fbk~öø©™LàÅøoK¢fa≤ë?Øa„ûo≠?RÆÑ±/òøç£“Ö·ÓÉøOgˆí)∞?(∞É¿xøÄ‘ áKö?èÀ_Ò9üøVé!‰‚∆íø ‘uC{>î?‰_;Äîƒ†?óP®Deëø}ï»ztgïøÒ3Éñpg?ΩzÏôÎU≤øµ•PMvµ?âl∫z"Cüø®L«"°ªüøÌBdr yøXÚ¬Áò=zøüΩeÏ;¥ø=U°eY•?t>Îëë®ø∏üG®?(/∏:éåÜø;ü„û•øÜf	¯V†õøkQós∆Éì?n{§Àﬂú?È[Ûû[Ã°ø æú5÷g?u&`ÄÏ∫ø≠i é\‘ÆøW¡⁄ﬁèWÆø„û#¸œΩò?%˜óÑ€?úøË|°R]Ñ?/˚n§7VU?êÎSL≠©?.Ω!Ä‡ô≥?}S<ùêæv?ª∏∑a'√tøÍ≈Xø¸¬ó? ^ó»¢¶?LvCÖ∞;ïøºyh'úî?q—¿Fîõ?â!≥_È™?6ä>ñsßøØ}ø†û!∑?t‘HÄ◊ΩØ?ZpÆ}€ıÖ?‡öM›óïø∂≤‚¯˙ñøÎ™$ÿ÷Têøìm÷ú`XÇ?n¿∆y(ü¶ø(Î◊†¶À•ø∫Â@ZégøÀ…cO öø$(<pÁ%°øq„›≠~øõnöΩ∫ }?I≠™´è?xA»¢~Qßø ÿQï?EHf¿Áùøe≠>™£€≤ø	¶	@ƒÀQ?Ë÷;A:Ûì?míuÒ‰æà?ﬁ/îÉAËúøùc˘ ÔH¶øú!ø¯N¶ø≈°ßñÁ¶?≥–1î—–î?JÓ‡¬‚πñ?J±nÿß?4çãBIÉ†øM≥∞sàøX≠_ç¢?ƒaƒô∫Ü†?æ®Ñ˜∫‰íøµ∂?)2î?‡9ÿæ'¶§ø30í@˙[ü?IJ•ò∂ëíømÈM´Z´øÜ¸›Ç?ÿ≠øl Í]â.jø18îÎ∑¿ßø≈êPæñu?¸ªıú?îø|ôe•TñøRpúº;íøŸW†ítøY»ﬁæé@c?f™2gÑ®ø0ìπX†?∞ÄªLJ åø≠äæ~üô?ıú,iP*}?cÙıﬂ˜-Ø?|?=œa∞ø«’‰‰FèøídT\’^?Œ%†°†øÈVßÅ!÷ìøc%taà[?f´ßcâ_eøË~ùáR¸ç?ùòö©µ£?…•˘|˜;®?¨‰ˆ⁄RXñ?≤ë&∆è?FvΩ&?tøÇ]Œ»w≤øia√Å54ø˜´4ùî?öŸQjøxøÓ˚|Øp°?π\<=h÷ÆøÇ≠–<!®øπºb€‹w§ø∂]≥`ÓM?µÙ⁄®?ÉÿÌAud¢øK∂VÖa•?˙/˛ Ëôø´$ÿ÷T∏É?ÅAD˝=óøïAÚ$¢≈üøMÕ„£?ŸõWˆ÷ âødŸ”€ç®öø”Ò^÷@ ®ø"∞‹&jzø.mñù¸§øŸ/=9¡9ê?ò…˚.(îøÇÁΩµ<§í?j‚û`_Ëö?µ◊Ãk6†ü?π‘*yz^?#	7#«Y?:∑ a]]u?KÂ_^è®•?æõZı:ó?òÉñ1‚[pøÛfQˆp?≥•îΩà"[?∏!]cƒ{ø˘	(ﬁ°6?fuÖ˛Îoø–HrcÙàÉø—î¢7
Øø¯^6•?Bà;óò∫?üÊ√7=Ωò?∆:>"Ú“á?Óãt‘áø‚ïY¡≈Cë?éï¢Ÿò~ç?^˘Œ]Çª†ø‘≤ÅÒùjøìFª¿õ§∂øÈ¸©+~èøÊ"             ˆ"                     # Bitcoin EVM Canary Network Quick Start  The goal of this quick;      ^;      # Bitcoin EVM Canary Network Quick Start  The goal of this quicln;      Æ;                      ;             ^;             Æ;             v   
content ˇˇˇˇˇˇˇˇˇ*string8
3vector ˇˇˇˇˇˇˇˇˇ*fixed_size_list:double:7688j
lance0.17.0z
lance0.1x   ˛w ˆu*l
0 ˇˇˇˇˇˇˇˇˇ*struct

null_count*int648
	min_value*string8
	max_value*string8 æwx<         LANC