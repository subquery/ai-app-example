# Kaia Quick Start  The goal of this quick start guide is to index all transfers and approval events from the [Orbit ETH](https://kaiascan.io/token/0x34d21b1e550d73cee41151c77f3c73359527a396) on [Kaia](https://kaiascan.io) Network .  <!-- @include: ../snippets/evm-quickstart-reference.md -->  Please initialise a Kaia project.  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/blob/main/Klaytn/klaytn-starter).  We use Ethereum packages, runtimes, and handlers (e.g. `@subql/node-ethereum`, `ethereum/Runtime`, and `ethereum/*Hander`) for Kaia Network. Since Kaia is an EVM-compatible layer-1, we can use the core Ethereum framework to index it. :::  <!-- @include: ../snippets/evm-manifest-intro.md#level2 -->  As we are indexing all transfers and approvals from the Orbit ETH contract on Kaia network, the first step is to import the contract abi definition which can be obtained from from any standard [ERC-20 contract](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/). Copy the entire contract ABI and save it as a file called `erc20.abi.json` in the `/abis` directory.  **Update the `datasources` section as follows:**  ```ts {   dataSources: [     {       kind: EthereumDatasourceKind.Runtime,       startBlock: 131206820,       // This is the block that the contract was deployed on https://kaiascan.io/token/0x34d21b1e550d73cee41151c77f3c73359527a396       options: {         // Must be a key of assets         abi: "erc20",         // This is the contract address for Orbit Ether https://kaiascan.io/token/0x34d21b1e550d73cee41151c77f3c73359527a396         address: "0x34d21b1e550d73cee41151c77f3c73359527a396",       },       assets: new Map([["erc20", { file: "./abis/erc20.abi.json" }]]),       mapping: {         file: "./dist/index.js",         handlers: [           {             kind: EthereumHandlerKind.Call,             handler: "handleTransaction",             filter: {               /**                * The function can either be the function fragment or signature                * function: '0x095ea7b3'                * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'                */               function: "approve(address spender, uint256 rawAmount)",             },           },           {             kind: EthereumHandlerKind.Event,             handler: "handleLog",             filter: {               /**                * Follows standard log filters https://docs.ethers.io/v5/concepts/events/                * address: "0x60781C2586D68229fde47564546784ab3fACA982"                */               topics: [                 "Transfer(address indexed from, address indexed to, uint256 amount)",               ],             },           },         ],       },     },   ], } ```  The above code indicates that you will be running a `handleTransaction` mapping function whenever there is a `approve` method being called on any transaction from the [Orbit ETH contract](https://kaiascan.io/token/0x34d21b1e550d73cee41151c77f3c73359527a396).  The code also indicates that you will be running a `handleLog` mapping function whenever there is a `Transfer` event being emitted from the [Orbit ETH](https://kaiascan.io/token/0x34d21b1e550d73cee41151c77f3c73359527a396).  <!-- @include: ../snippets/ethereum-manifest-note.md -->  <!-- @include: ../snippets/schema-intro.md#level2 -->  Remove all existing entities and update the `schema.graphql` file as follows. Here you can see we are indexing block information such as the id, blockHeight, transfer receiver and transfer sender along with an approvals and all of the attributes related to them (such as owner and spender etc.).  ```graphql type Transfer @entity {   id: ID! # Transaction hash   blockHeight: BigInt   to: String!   from: String!   value: BigInt!   contractAddress: String! }  type Approval @entity {   id: ID! # Transaction hash   blockHeight: BigInt   owner: String!   spender: String!   value: BigInt!   contractAddress: String! } ```  <!-- @include: ../snippets/note-on-entity-relationships.md -->  <!-- @include: ../snippets/evm-codegen.md -->  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; ```  <!-- @include: ../snippets/schema-note.md -->  <!-- @include: ../snippets/mapping-intro.md#level2 -->  Navigate to the default mapping function in the `src/mappings` directory. You will be able to see two exported functions `handleLog` and `handleTransaction`:  ```ts export async function handleLog(log: TransferLog): Promise<void> {   logger.info(`New transfer transaction log at block ${log.blockNumber}`);   assert(log.args, "No log.args");    const transaction = Transfer.create({     id: log.transactionHash,     blockHeight: BigInt(log.blockNumber),     to: log.args.to,     from: log.args.from,     value: log.args.value.toBigInt(),     contractAddress: log.address,   });    await transaction.save(); }  export async function handleTransaction(tx: ApproveTransaction): Promise<void> {   logger.info(`New Approval transaction at block ${tx.blockNumber}`);   assert(tx.args, "No tx.args");    const approval = Approval.create({     id: tx.hash,     owner: tx.from,     spender: await tx.args[0],     value: BigInt(await tx.args[1].toString()),     contractAddress: tx.to,   });    await approval.save(); } ```  The `handleLog` function receives a `log` parameter of type `TransferLog` which includes log data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  The `handleTransaction` function receives a `tx` parameter of type `ApproveTransaction` which includes transaction data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  <!-- @include: ../snippets/ethereum-mapping-note.md -->  <!-- @include: ../snippets/build.md -->  <!-- @include: ../snippets/run-locally.md -->  <!-- @include: ../snippets/query-intro.md -->  ```graphql # Write your query or mutation here {   query {     transfers(first: 5, orderBy: VALUE_DESC) {       totalCount       nodes {         id         blockHeight         from         to         value         contractAddress       }     }   }   approvals(first: 5, orderBy: BLOCK_HEIGHT_DESC) {     nodes {       id       blockHeight       owner       spender       value       contractAddress     }   } } ```  You will see the result similar to below:  ```json {   "data": {     "query": {       "transfers": {         "totalCount": 8,         "nodes": [           {             "id": "0x19a332808b2642af38d84951bbe17c044b021be6e587a2f8799ff90419279672",             "blockHeight": "131207180",             "from": "0xd3e2Fd9dB41Acea03f0E0c22d85D3076186f4f24",             "to": "0xa03990511B6ee8BDb24C1693f9f8BD90DDfFd19D",             "value": "1813529233975307",             "contractAddress": "0x34d21b1e550D73cee41151c77F3c73359527a396"           },           {             "id": "0x12581a3f5dcb67a4d5017fa877c1971f130539ceb81949478cf3710f27802c44",             "blockHeight": "131207054",             "from": "0x6B0177E96C3623B6F6940dA18378d52f78CeA12D",             "to": "0x88Fe4fB118c954c11A359AbcE9dc887F7399bE1c",             "value": "1731405454880983",             "contractAddress": "0x34d21b1e550D73cee41151c77F3c73359527a396"           },           {             "id": "0x8df838f5f6e0710c43a15512c353c62ca7ef90b19e77db72f832835d2eab76b1",             "blockHeight": "131207096",             "from": "0xc3DA629c518404860c8893a66cE3Bb2e16bea6eC",             "to": "0xd3e2Fd9dB41Acea03f0E0c22d85D3076186f4f24",             "value": "160321797378530",             "contractAddress": "0x34d21b1e550D73cee41151c77F3c73359527a396"           },           {             "id": "0xc4f94437900be853cc03e0fae2c18650fdde00bd8a26cd080d45dd9051edad42",             "blockHeight": "131206820",             "from": "0x6B0177E96C3623B6F6940dA18378d52f78CeA12D",             "to": "0x71B59e4bC2995B57aA03437ed645AdA7Dd5B1890",             "value": "18574153690448",             "contractAddress": "0x34d21b1e550D73cee41151c77F3c73359527a396"           },           {             "id": "0x6e4c46dad80fa9c55f4d1e6048317f12614b7405321ce36ed7bec8b0e624dffb",             "blockHeight": "131207283",             "from": "0xAebFAe557F3948B91c9cb25fc650A26F728C5C9d",             "to": "0x09267e3E96925C76DfcC2CE39479559A2AB9B8a2",             "value": "2000000000000",             "contractAddress": "0x34d21b1e550D73cee41151c77F3c73359527a396"           }         ]       }     },     "approvals": {       "nodes": [         {           "id": "0x61e162fa7e5bbc5edfb462627eaf6d96aaf240ccde102bb0a04ef868bab54c07",           "blockHeight": null,           "owner": "0x88Fe4fB118c954c11A359AbcE9dc887F7399bE1c",           "spender": "0x51D233B5aE7820030A29c75d6788403B8B5d317B",           "value": "115792089237316195423570985008687907853269984665640564039457584007913129639935",           "contractAddress": "0x34d21b1e550D73cee41151c77F3c73359527a396"         }       ]     }   } } ```  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/blob/main/Klaytn/klaytn-starter). :::  <!-- @include: ../snippets/whats-next.md -->         Ï$      ¨‚§hô–Üø¬!ò∆÷ë?=ú>8(µø–≈Íˇé?%Y‹O ß?∆ù&¡àn´øAÚ0RñøÏèª˛‡ ö?]Et?û?L¨∆Ò«›ë?Üå˛˙¯•ø,≤Mvø7
#Ê'ß?ﬂÌãï‚Ù≤øU|*Dj©?6}ºˇ´êø¨i~ˇ]‘ÉøaKÇ‰[∞ø"húÎ”®ä?Ã<™{,ö?åùüÀúûøœ¢ò8…¡∞ø”˜áâ?õ¬6!.≤ïø(‚˚…µ¿?‰en:Ÿ8îø*OXñsá?©‘p∫˙Î™?h‚ˇâÔñåøzWòëÉ∞ø€Qx&6ìV?l©¨;PÜîø
Á¶U≤?‘;h∏˘-£ø,á%¸1Öø`/†Y
/≥øÏsà5qq? r‰‹Å±øŒZDÛÑN≠øD"-»®»ìø¢GO;Cù?cx” 	óøß ‚¢Æø!ÇóﬂWÆ3?„ÔIÌf¬±?ÆQ[#êø≤IÀFÄø⁄´2÷è?3üÖößéõ?˜Ã•Üpèø£í“ÿ≤ã?-^ ¶¢øÉÀÜ‹‹˝YøˇEh«∑Üø∆ÑÑNB≥?∑öOˇT:©?ú¿‹=,ô?cmåT—<]?èZ—õøFè›÷5i?ÉGIóh™?ùÊ$aÕk¨?`Yä`Û‹¶øN?,ƒ∏µ?´+∏Ç|ë?˜œpVÜiöø;™@“LÄ?¿m_ÒË´?Û·)IrøHƒ€.FÑø˛Lêl	†?èpr?ÃRÌ˛qıõ?ñª»àKüøÈàä€Eyø¯ŸØÿ≤æüø∂∞ªÖéøK∏’âíkVøŒ~Õ>Âî?tY•$ÜEî?	<‹ÄbsíøèP›£—˘™øúºGÑÊ=¢?ùÆº+|£?ÙÉ_è.ó?2∫0êoÑø≤tEˆ/≥ç?ó€#¸ÆøKê2^ ´≥øÃømÿ|}ù? 7‹<◊¥p?™z£†?s¡∂—B˙≤ø∞õ¬ ™u?sNhiŸ ¥øè‡œªt=£ø FXåêøVä®Ã´ß?„A´zñsßø…É=∂ìø˛#ÂÑèåø-4>öôøﬁ˛‡l»§?4ò⁄‡±êòøC?à°+ îølã[öï†?≠∂ã˛
x¥ø/˙
“åE£?pÑ!$}Øø;R º∞ûøIAn¡}›öø3,Y>`ñøóõY_ÂO•?á)ø|Fßøt:òfÖøUúÊ¢øu‚êõ?•˙ñÖÎ[b?Ë NYΩj?Ê{Ë∞2Ç|ø‘Iï¨≥Ô™øê
˛ﬂZü?√nÖ‹øÃdø¯.†«qøb–§uùãøÑ"x§?Á<îΩÌñtøtG∆¸1¨t?P√”ûvñ?w◊Éê∆}Äø?¬BCÖ>êø€Ümekxò?∞ÀÆÉúZ®øçé-aÈ≠?0ä@ä˝†ø3aß?9…–]Ñº©øuZJ•æ}êø*6˛¢÷•øV#"A`ì?≠«ÿdË3ï?R
dΩÎH†?/J‚B§˙î?æ° îøuıøõîÄ?6k◊!äîøu˜O#l˘ß?˜Ù°£Á¢øÜ2Í‡¥nêø|©m˝”ë®?∆^U·¬∆∫?û—ó>{{ø°QÆ¢ö£?Ï¿—?’©®?µ ÙiûÓÉ?f9◊¨
üø¯¸„≤í?Dˇ˜Ï(Í~?Oá_˚åø)Rî]∆”ò?—æJ"!ËÅ?6Óï≈9Ùò?’hñV±øµ∂cÄÅ-yø©aú¬Ãõøî9h?Í`ëøº◊P7>˝Åø”k≥±Û¥?€ÜØÅ=ævø∞¶a·Ï"©?ØOÔòpû†øòN<~ß}§øCÍ«=ïáúø!È@4≈Ä?ÑWf£ú?^e&~∞ã?˘/R öÇ?ÇƒùBud<ø>ÍÙ‚ôéwøÀÚæƒ4§øä≠∏œïøè;˚ÉÆh†øø∆àD°ùø◊Nä—~?$/As¡±ø@hÒÌSã?Aær'RFí?æ»n‡∫‘•øBﬁ˛ûP6•ø°Œùﬂ~`ïø
Rc!æ<öø˙≈Â
}eøÜC∏«ßí?ŸÌP†ë døNpâ⁄8çu?„Ai^ƒ-∞øÀAÙó"hî?òÊuÉ*nbøM¸Ó©ﬁ°?Îñ˘®‰®?jÏF§ÑøŸ
¥µjç?\ÑƒûøŒ¶ø‹ﬂ¢ôÉµlømQ¢¡?søØÅ•°„v≥?m€%·™£øJ∏ï *åï?˙≠®Û´î?ı%ê-*âøYN√—£?=ªÛ˘eÜéøﬁ
Ê…Ñ? §ibÀtøXOi°Ω*¶?urw∑a˝ïøòP‚æ˘´ø¿äòÅÊM´ø='·}Ì¶ø-È@~†?îmûÚ‰∞?‡j?GØó?Ï„QÑuWf?•,Ì2˙†ø Eın›·gøïühﬂ[ﬂì?e˜SF‚ç?Ô.£öä;∞?õäÿPˇì≥?NUyπäù?≈—MIs?⁄óãßâ?|}˘Ÿ“Áé?ê}æù¨g®?4s¶$¬:b?‰7s≤NAx?N˝r.(Çø5WˆÚu¯°?Ólb]Èp¶ø<ÅÚo~`ÇøT
ºæœÎó?øHhÀπø/· ïR}?ã–
7Ÿ9o?Ì#ﬂ$.ç?@dø^…§ò?ã¯ÕKeTp?“àC}e∫í?d AÑ«ùß?æøﬁP:âü?D‡=©…¢?Cèµ¸•øﬂK‡ú2©?aA∏√Æï?l¬ö#[¯ûø-`ÂÑåø∂πHŸ÷⁄óø˛ 'Ñ>Û¨?¨yÈÅÍz≠ø™ëÕΩ÷ë•ø#ÒŸ◊≠?\µ∆˚Ã¥ß?=ˆq<∏û°?°*Ìß€Êïø,ûO$eyëøMÓôRë?(åòü<®≥øñZQ=pí}?ïÄ»Ω!÷®?ÎVŸªbÌÉ?ÑE8÷ù?Ê¬Ÿërø05¿!u¢ø\Gø˜„hõø]eÏ“&QV?OgzÀÕßø≤‘±/Éå?O].üIØøŸU‹LµïøWz ö'(åø»§›Ëƒvø(Éw™øÂ≥ü9©7úøöø˝júø¥ãÚóŸëÖøÕ_:\ãø÷5∏ıP¨ø•˝¿iÇ'ã?®ìΩÒçïøÑÌ8OíøÊ◊@y+∏?á‚+>≈†ø’MµXÇs´øÅˇ∞Vıê?B˘Ë¯[áø	√TÄ’tuøwòÿw£aô?Y•;"ªﬂò? ‡ˇ}|¯t?é=°ııûøŒ§wèô?¸oÿpö?=«p
e¿ß?Z≤·Ê›¶?Y´Öxu•ó?ñá"Á¯}?n£ä≠cÅøÕ≤Ç:@ãòø√¥‘bµ?x{◊ƒÎrøäee¡Â-û?BÚËc“®V?I°}√öøtb?&®?“◊m¸˚´øâ]ı˚Q?a¬!Å*aµ?ÌË"≈*p?åoçßú1á?éVZÎ0À¥øØè»#*ÁÇøæC‚ˆÔ®øX°çÀ‘˛Ä?¶ùœΩ›KÆø—Ωìæ,«Å?Å|_’¨?°X~K∆R§ø‰R‘¸]Ö?„+Å›˜ãt?Èÿﬁ˙Ú˙úøV5´∏åôøøoà`8±ç?EÉ± Û∞?[ ‡˘¡–ôø?ªFBê¿®øÛ¿Góõø,sˇ á*•ø-Á˜¢‚§£?Ï∏æ∑Ä ˘>†Jò,ò?qøÄØG¥¥?àwA√Èƒòøùd« Yª¶?˚Ñ¢/sp£ø∆	-ö∑≤î?6A¬öDiõø	Ô˘ƒíøxXH√†Å}øÿà2‰pó†?S∑4•ã∂/økíî˛¢'Ñ?>ÜØøŒ4H_πTø=áú8e‡ã? ∫ö∫´†øNÿnôT/f?C◊7ê+~é?˝g,&Ê¸\?<x7`°†±ø]Ì¡-°wø#Àc|Å!ìø•f¬Œs?˛êÕA6é?ﬂ∫-T®µã?§<¿Å3r¢?,√—∏‰v°?0à@‹rÅ°?∑∞÷ü∞´?h°28)P≤?hø§ÁÃ,¨?È‡OC
T∞øN>/–ò?b7C‹bü§?”DÈM?™?S◊VŸ=g$øïe≥„π–§øØÖ
"o§økN≠∆+°ø4uÀÃ‘=ß?àã_Lö?.5õ˜öFî?’éaú_óú?’êŸ’ª™Ø?º¨YÃßEá?±Œ†Ω‘±ïøoπy8ïø9Stf≥—êøoêBai±?àM¸é≈ìøú∂"–©K?4ö‡ƒ%ì?8dJæÓÅµø?£:>÷c™ø[Ë6 √‹ñø·F]zÅãø`=V?"Â†ø"lôàéOÇ?$k[ËÿÇø—Ü$¸P>Æ?»◊!n±ø˜ÙÖN◊,¶ø[/]Ûp°øïπ˛ˇ-8ã?ÚÏ?azJtø/†<zMø÷Åﬁ·ó®?…„•ø“Û ù∑:°?Ø©T7◊˚‰æÖ«j2dÓéøfÇÜ£Pª¶?y5æ#´?.tçÂIéø˝7M§÷)vø›Ì?œóç?Ïﬂıô≥>ï?{€ºêoø‰˜1D 'òøÅHñ˛Î˝ûøj=˛$¬ë?ê™ÕœrxwøØ&u bõ?s˝‘€‚≠?˝`Ë*@à±?ﬂä£ˆKß?-‘§XëxÅ?èí› Ë’âø”§∂zIö?Ω≠f0UOèølüBßf øÊCÃ¸’©Øø&‚åÂÜt≤?≥û€cø3¿  ˘áøí{õ–üø∞ü9¿”ï?ŸTÔWî`øv<.ˆ”âÄømç{£?√~)Â∞Yò?Ì“Ü√“¿¶?¸∫_GA¥øÓ›ò˛"ÒÅ?Õ`Áá´≤ø+ö9Í	«•?å3ï45∞?"5Ö%óø¶<Bˆ±øw⁄˛ª\…¶ø Ù?ëølÓ÷ú˝-°?cäo±mã?,∑âöµüø=h^´êñø!sÜ^V≤?…ür√$ôëø≥∏ïõµÜl?8˘¿ù*0£?Çø◊H}÷_?ÕMH)gè?~“_`¸Jeøñ£#`D@°?æ9zò`©ø3kºÉæEñøR∏Ã1ÈWø¥"Xø_{øØWWc€z?1Ûû√Øåø¢∑xxœÅ£ø5IÙ~+¨?-8±˜Joùø∫ãI‚Y@Æ?ıΩ‹‡qu£?¿∑&∑œïø#Ùº§ËÉøM–Tø:›ç?H°iﬂïäçø“”Åÿb?`fG∆D,ì?\îUËÓ úø¥õ^?ãÄz?—∞¶≈ô?.pˇô⁄±øöd:jòøßÏ∑ ¢k†?Ü>F„ Ö¢?›D&∏á?Ω≥ôÍô√ÅøÌ±!=$ö?∫K¡ûüwôøR5`·;i≠?G	aÅmtøˆﬁÇÊÔî?…Œu?¬b?ú}/œ¶ø≥°√≈O∏í?2√cÜ`§øµœ¿jãøΩ«s_…≥±?8Ÿß˙õø,/3KÜ•?‘„™õë?ºJtK‚•øla≥Ø~d°? JÂÆ§ô?ßc|~≤oøh\=…K§øK€„xJ£øÆÈI≤q°øRY˚ÿ∞Ë¢?e«q†∫Àçø|‰bN»µ¢øÓ˘<∆.≤?ù ös∂°öø=Ãÿ|Œî?‹«<∏\yíøT-u“ÛU£ø⁄ÓXKÖ°£øSPzt]◊õø(√Ü·T®?†Õ›#•Ø?Âc»»ëÇä?à–âˇ‚2bø÷?ûó˜©ø◊0#ƒÆ©ø\ı‹n†uø•¶„Ö#ö?–‚Î@îÓqølùä‰√ùï?˘ÌÅ‹ôóû?	íe+©øå?™°™ïK€†?£Iºûûó?Ö≤ÊÉB]¨øœüMFI”ê?5…Xº˚mø{8tø≤Ó∑øÃ]g7˜ï?ÎfoæKà®?ç 3Ñ∞?øRm¢\;Æ?ä÷˛å⁄ú?∫¶øVe?ø»xR.¶î?hpL0K$)øâÍe"‰ùø“±ﬁœ∞øwÁ‹/ó°ø¿Q¯⁄kë?àÅÎ‡öòøëΩ{”6ˆ≥?ˇ≈ÀGî∫øv‚rº—≠øXÙπ†∂ø v,æ∫ç°?_∏7ÈûøK¬Ÿ;öø´ÖƒÎ¥°?øn`\mÉø¨Öﬂ~Uj?≤éîAv]∞?NBæãƒ¶?0§¨ß¢ÌñøíıCà¢øÁ∞†°ø»˘`UFàøæ“∞vÿáø“c<ãÈ>?zy·ûL{ï?T˚◊f!	∂? 2ö™©ú?⁄>÷ﬁ/wiøhõ„(µ!á?xªr~	c[?Æ‘í´‘ñø¿ëƒªÒ(∞?›x‰ €pÅø«(å¥Ùè?i¡Q˘¨ø¿•k?|£øs∆&d≠∞?.r.Ié	áøñ—ê=∑⁄üø*&≥ùñÔíø±≥tG˜Z≠øç¡-ôzùø˚Õ”üNêúøœƒçæˆä´øµlŒ=˚¸´?Ÿ:@Ó*™?è⁄iãΩú?ƒY√]ë?Äüw3©.?tab˚‚õø`«Ä†gáø‰G'´≠~?EÛrk·òv?-¯·ﬁx∞?^vîÚv^|?c˙“ôÉπP?™.xÇºpø˘Mf^<Û¢?.ˆ≠¬•‰ß?nÅ‡®éßø§7˝UWp∞?ôCJX•?mπ|È¬OÖ?Dúw1 ª?Zvõ8Øøo·/æóøÿé|:+]Ü?Ö“ﬂóoáú?zûÒ›„’•ø—ÄL˚~ñøK≠ZF®!°?6D#πs?]ˇK•·åî?A¨¸ò∆ô?É …-9ÄørÒ€π3Æø2Ù—ß*tóø`Íˆxrdù?hŒˇM£?„Y‚˛¨î?ª<^«rø2»  X¨?ƒ≈°$ÉXø÷R¯ﬂN
}?vµm¸ØëÅ?ºOÀ Ôg?ú–
]†‹¢øotﬂ·ÌÄ?…Ê]ö¢ø“1”5ãøb™p6„Uíø£	#‹µõ§?=SÇ⁄|óøˆU∆z˚Wí?æ‘Ibª†?∫¨6Ωìh´?8ñ.ˇL}ß?:I HÉ¸†ø-ıÄ·´£øﬂ˘âoRø¥œS˚ıkøËv†:ï]?Ï‹¥ß!í?ø5á÷PãßøAjü>•2l?v@‰ΩÇ†ø ¥åÚ¢?Z≥:ﬁâ˛†?„EøÚ~b‡°?∆÷G±iN? „Íyóàñ? ñF‡–⁄çø#‰æ ªÕuøÀ1m¿f¨øYP®:Ûõø-º¢∆J®?QV%ÙßK§?–n?›xë?9#à?ÓŒÜÄlï?–iΩØ/±xø§Ñ&™ª?Øãı·¶Ï7?∑ëøo‘Æø≤e)ûø´‰ÿÑ¯„ó?Îëø·)◊å?ïÄ·ó%îø;ÒÎsÙyäø⁄˚˘[ß6ßøj•çv®?‚´™]4≤?·OÓÅoï?_´- y?X–√Í>ï?/°HÇÛ∞øÙ”£út ¶?ãXO£LGi?~N¸ òø«û=ó©IÑøbÃ+áúøíÄƒªÀaù?˙yzUc?ù	¬¬èø©ŸJÄøÏ∫®˜ú?öY ÄS"Ñø¨⁄≠ùì[}øbHª¬úOñøRê¢EÎ§?∆#8·Ühøø∏õzπ\í?√ù#Ω®•?Î\˝JzãøÈùæÔÎQ?}#¸É/ÈõøE-5ëÖ'}?_Å1 PÖøa¥\pÂpí?∆‰ò"|Ãîø«Cà)É?ÎD†ˇ¿Jõø=@ú,Z´ø*ıUá∏™øôF⁄`Ω^°ø¡äŸ/tuKøõs]ÈñÃäø"oÎÑøGQNQÅ’Ö?eQÿE—≥ø ˙n‘πãÑ?í!*ÔÏ™?íè6æë°l?¸éüïÕîø%ÔLgr°ø»„ #ÀBí?‘°¡≥£?=yíúﬁ—G?ƒÁÛˆåÈ¨øx√K™ïç±øÇÀr¯ıZàøÎ¢<Åê?ùFP∏˚uóøÍ_ÌÉáƒåøCr≈öøœˇ°~ñ?8`µ©¨üø‘dÑøxÈ≤øIkeNÆõ?öÁ›†J…jødÇ™ô?^Ì[øˆRêøÄE~˝à?ßK∫æÛùølÙŸ,Eu?À< ƒ&®øe\nπ≈øüø¥G=~N≈é?& ¿‰X|?“–BîP§?Ú≥Aè7ñø£<“dÔZ≥ø~$ähÚœë?§ø~%„Z≤?º3fTUï?NÇÙ8£øÊ$Ç€Tâå?Ì˚éÊêø¯Ëw€1Áû?8∫˘/ÿçø
≤éxÏF°øjT£€™øW⁄Vq≤&±?m\ZhBÓ∑?VÅ_≈◊~ø©tÿ∆ùßÅ?Òo|z<Ç?£2CµQõ?Ø$5©ûø2å“›)®¨øâ8Òc9˙ïøGY‚£Û§øZÑ∫fZô?Ï$             ¸$                     # Kaia Quick Start  The goal of this quick start guide is to ind$=      d=      # Kaia Quick Start  The goal of this quick start guide is to inet=      ¥=                      =             d=             ¥=             v   
content ˇˇˇˇˇˇˇˇˇ*string8
3vector ˇˇˇˇˇˇˇˇˇ*fixed_size_list:double:7688j
lance0.17.0z
lance0.1x   Ñ| ¸y*l
0 ˇˇˇˇˇˇˇˇˇ*struct

null_count*int648
	min_value*string8
	max_value*string8 ƒ{~>         LANC