# Polygon zkEVM Quick Start  The goal of this quick start guide is to index all transfers and approval events from the [Wrapped Eth](https://zkevm.polygonscan.com/token/0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9) on [Polygon zkEVM](https://zkevm.polygonscan.com) Network .  Please initialise an a Polygon zkEVM project.  <!-- @include: ../snippets/evm-quickstart-reference.md -->  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/blob/main/Polygon/polygon-zkevm-starter).  We use Ethereum packages, runtimes, and handlers (e.g. `@subql/node-ethereum`, `ethereum/Runtime`, and `ethereum/*Hander`) for Polygon zkEVM. Since Polygon zkEVM is an EVM-compatible layer-2 scaling solution, we can use the core Ethereum framework to index it. :::  <!-- @include: ../snippets/evm-manifest-intro.md#level2 -->  As we are indexing all transfers and approvals from the Wrapped ETH contract on Polygon zkEVM network, the first step is to import the contract abi definition which can be obtained from from any standard [ERC-20 contract](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/). Copy the entire contract ABI and save it as a file called `erc20.abi.json` in the `/abis` directory.  **Update the `datasources` section as follows:**  ```ts {   dataSources: [     {       kind: EthereumDatasourceKind.Runtime,       startBlock: 1, // This is the block that the contract was deployed on https://zkevm.polygonscan.com/token/0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9       options: {         // Must be a key of assets         abi: "erc20",         // This is the contract address for Wrapped Ether https://zkevm.polygonscan.com/token/0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9         address: "0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9",       },       assets: new Map([["erc20", { file: "./abis/erc20.abi.json" }]]),       mapping: {         file: "./dist/index.js",         handlers: [           {             kind: EthereumHandlerKind.Call,             handler: "handleTransaction",             filter: {               /**                * The function can either be the function fragment or signature                * function: '0x095ea7b3'                * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'                */               function: "approve(address spender, uint256 rawAmount)",             },           },           {             kind: EthereumHandlerKind.Event,             handler: "handleLog",             filter: {               /**                * Follows standard log filters https://docs.ethers.io/v5/concepts/events/                * address: "0x60781C2586D68229fde47564546784ab3fACA982"                */               topics: [                 "Transfer(address indexed from, address indexed to, uint256 amount)",               ],             },           },         ],       },     },   ], } ```  The above code indicates that you will be running a `handleTransaction` mapping function whenever there is a `approve` method being called on any transaction from the [WETH contract](https://zkevm.polygonscan.com/token/0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9).  The code also indicates that you will be running a `handleLog` mapping function whenever there is a `Transfer` event being emitted from the [WETH contract](https://zkevm.polygonscan.com/token/0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9).  <!-- @include: ../snippets/polygon-manifest-note.md -->  <!-- @include: ../snippets/schema-intro.md#level2 -->  Remove all existing entities and update the `schema.graphql` file as follows. Here you can see we are indexing block information such as the id, blockHeight, transfer receiver and transfer sender along with an approvals and all of the attributes related to them (such as owner and spender etc.).  ```graphql type Transfer @entity {   id: ID! # Transaction hash   blockHeight: BigInt   to: String!   from: String!   value: BigInt!   contractAddress: String! }  type Approval @entity {   id: ID! # Transaction hash   blockHeight: BigInt   owner: String!   spender: String!   value: BigInt!   contractAddress: String! } ```  <!-- @include: ../snippets/note-on-entity-relationships.md -->  <!-- @include: ../snippets/evm-codegen.md -->  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; ```  <!-- @include: ../snippets/schema-note.md -->  <!-- @include: ../snippets/mapping-intro.md#level2 -->  Navigate to the default mapping function in the `src/mappings` directory. You will be able to see two exported functions `handleLog` and `handleTransaction`:  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; import assert from "assert";  export async function handleLog(log: TransferLog): Promise<void> {   logger.info(`New transfer transaction log at block ${log.blockNumber}`);   assert(log.args, "No log.args");    const transaction = Transfer.create({     id: log.transactionHash,     blockHeight: BigInt(log.blockNumber),     to: log.args.to,     from: log.args.from,     value: log.args.value.toBigInt(),     contractAddress: log.address,   });    await transaction.save(); }  export async function handleTransaction(tx: ApproveTransaction): Promise<void> {   logger.info(`New Approval transaction at block ${tx.blockNumber}`);   assert(tx.args, "No tx.args");    const approval = Approval.create({     id: tx.hash,     owner: tx.from,     spender: await tx.args[0],     value: BigInt(await tx.args[1].toString()),     contractAddress: tx.to,   });    await approval.save(); } ```  The `handleLog` function receives a `log` parameter of type `TransferLog` which includes log data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  The `handleTransaction` function receives a `tx` parameter of type `ApproveTransaction` which includes transaction data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  <!-- @include: ../snippets/polygon-mapping-note.md -->  <!-- @include: ../snippets/build.md -->  <!-- @include: ../snippets/run-locally.md -->  <!-- @include: ../snippets/query-intro.md -->  ```graphql # Write your query or mutation here {   query {     transfers(first: 5, orderBy: VALUE_DESC) {       totalCount       nodes {         id         blockHeight         from         to         value         contractAddress       }     }   }   approvals(first: 5, orderBy: BLOCK_HEIGHT_DESC) {     nodes {       id       blockHeight       owner       spender       value       contractAddress     }   } } ```  You will see the result similar to below:  ```json {   "data": {     "query": {       "transfers": {         "totalCount": 901,         "nodes": [           {             "id": "0x11c3519a07d48ca7e9b3d77c9c288919e8786dfffaad76bdfd6ae554d2481a13",             "blockHeight": "3072",             "from": "0xC6c893a0dCf31b5766Ac5c103AF9e9805A6d0774",             "to": "0xd8E1E7009802c914b0d39B31Fc1759A865b727B1",             "value": "4390819482026157205",             "contractAddress": "0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9"           },           {             "id": "0x8d2eed830280b0e35165560f7234da3ccd02f9dc526434e874ccb0e5a464c4f6",             "blockHeight": "936",             "from": "0xd8E1E7009802c914b0d39B31Fc1759A865b727B1",             "to": "0x267816F8789a28463cE10acD50ffeDDE57F318Ee",             "value": "3499686336793644484",             "contractAddress": "0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9"           },           {             "id": "0x818086a329ca6cecfaf55ac6f3c5a34b985a97ef5439c15bb66f094b4e76a8e5",             "blockHeight": "2841",             "from": "0xd8E1E7009802c914b0d39B31Fc1759A865b727B1",             "to": "0xC6c893a0dCf31b5766Ac5c103AF9e9805A6d0774",             "value": "3300395407835132030",             "contractAddress": "0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9"           },           {             "id": "0x08e395f3058c05141ab656e08fba91d47d52c9bc954e26f378e4edd3f4ef9d8d",             "blockHeight": "2435",             "from": "0x4b8f52c68594554DdF13aff5E2d8d788bC56Ca8c",             "to": "0xd8E1E7009802c914b0d39B31Fc1759A865b727B1",             "value": "1794066117854317399",             "contractAddress": "0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9"           },           {             "id": "0x0ac0c00fd9c3bb4ee921e82fe32e658846497697447d9dadffaaec64b2c5ff4a",             "blockHeight": "2998",             "from": "0x7D9195077671B08F442B2A1b310858bDB1C4abcc",             "to": "0xd8E1E7009802c914b0d39B31Fc1759A865b727B1",             "value": "1430946047728089377",             "contractAddress": "0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9"           }         ]       }     },     "approvals": {       "nodes": [         {           "id": "0xccec6946012d52a27fcae9790ade5a5e7314f934170483fecf2896e3448604bd",           "blockHeight": null,           "owner": "0x12680Ad2f3D80b162344Ba3FF3978daB7A565675",           "spender": "0xd8E1E7009802c914b0d39B31Fc1759A865b727B1",           "value": "115792089237316195423570985008687907853269984665640564039457584007913129639935",           "contractAddress": "0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9"         }       ]     }   } } ```  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/blob/main/Polygon/polygon-zkevm-starter/). :::  <!-- @include: ../snippets/whats-next.md -->         &      ùü∑∏ìvó?⁄ø∫CÌ+†?1äà}µøüY–É‘PßøYÕJ≈åôø∂(ü]?v°?«∫ú8◊5åø fäî¡¨óø*Aw0ˇt≥?n˝OY®ê†øú]jàK?ÔuÅsáwø||!hı£áø
 k¸xû™ø˘≤k}ºP£øA#∫b§È¨ø¸∏ØcYπr?ÉƒUÈ∫±ø—£88zø.¶«&aıõ?8œè¡µ”õøk†Ø+¥øÄêl{©Bâ?â7>“aì?Û¢‹çp…?…wFﬂÕ¥?%DÒŒ˙Üøë=,ü_˜i?qØä?£◊ïø¶ˇ˚?∆]ØøA›f±"h?≥BëÓÁ∞øÎÕ“ﬂ(Eø!Œ3†∞(Eø&kïﬂ"î?£$.D™œ°ø∏UR/A£?Ã+S£¬íø≈N9•
Êû?|‹ˆæj≈ñ?këºå≈„Ñøs∫Zi¢?·ëÄÍÇn°øZWk\2à?ﬂá,_J.%øçºﬁ&q£ø¶9òû«`•?ˇq=D•ø≠2SZK™ø(£‹w5†øèÅ¨:‘vø“1JD∂˚®?ZË†fË©ø-<í?÷€±øòÓ‡Ìbµ?ÚDÇ< ß¶ø≥kŸ€!úø;IËû›p¶?åˇT?„Ä´?®¡ó6⁄y¨ø•˙‰]{S?g1ﬁX¬©?Cçä¨Ûìø¶Ω—ò§ª?A√r∂F°?“
¬À¬ç∞øùÕ7ûÁAyøR∫≤wî?3.∑‹‚ﬂ†ø…ßΩDôfêø1,rî+ÿå?PSÑotñø’ 3Îgû?ΩÎ1ƒè?≈≥äR–ZÇ?yñP\∂î?º>ødÌ3r?aﬂjwÒyáøóöê{ëø¸Ü¡∞á§?0≠F©ñ
p?ªÄ*}ê®?mΩÆxMº•?l¯ä,°à?±¢´æ*†?2	Ÿb§ø¨ÅÃÍvàøt«◊®Àçø3-wáê†ø;5√rµ}?≠‚Z€~sõ?”0ﬂnÚ¥?¬ä≈n¸ú?á2ñ·&@§?ÃÆˇc∂û∂ø{ha=Xp?ß∆}p±ø4á¨>sgAøv˜z£»Ì™ø≤"Gìªjä?&]2¶?›Ss–Ä?Ÿ‚‡Û?–¶?ÿ∑ˆ≤´òõøiKó™&Üøç$§‚Ωr¥?ˇ∂aÛı•ú?§ˆ« Xõø«Ï›˜£ø+D∞?√z•øü“wm%*†ø“¢F:fMÆ?Ö≠º	ëø"ô≠s…ÖøCx¢é†øΩÀ†5öùøhÂß„÷Åø0Fkﬂ∏ôßø±{<>k»Ø?≤˙]∑åƒ∞?!∞°|Çf?ü∂©Â~sU?…w∆J–îø(Œú=ß™?7f¿ˆ€†øã^¸#¬uëøèu5›Kø±¶≤(Ï¢ò?ó^â™ŸØç?ÑÜßŒaê?|õpB0-ã?$ †ßsòøQˆkÚa‰ãø ÃvPLàxø ∂_ÄuÉ∞øù«ÖY!í?Ú ·õä†øq—k·È˝¢øFyÊÂ∞˚≥?K'Æ¯¿•?∞äö\Je§?.ù˙3»ÃÖøﬁïg¢+∏èøe±∏téøÏﬁﬁãj{ø∆@¶Œ©ø
 π@E6pø≠◊‡ºπqëø1ã·Œ´åøDxö¿Zù?⁄AO£∑?±Å:‡vØ?Õ§=‰Å¨?™ºn(¥`ë?EJq]J¿•?√”=H’ ûø˘Bg‚≠kørÛ‡rÂ¶?º…“˚Ñª™?(¿(‡Ÿì?!yÓì?∆`æÔÒüÑøå÷¥ˇø9∏øÇŒgÍº`åø€X%ôÈõøŒ˙_q‚ÚÜøÅQ ß@~øﬁäÃu}ì±?˘í|€¯£øóS‹öo¢ú?k3ˇ¸ê?ùΩBÿ^ïø•èhö[îøÏ®§-2*¶øŒŒ2#m˜™?àˆofAÜ?çDDá¬€ZøpÎû1®®ø‘‘ëß’%Ö?Hd«∏$∞ø—&k˙
◊U?1’f¡ﬂhø≈¸¨ó~@äø?.yU ﬂ´?ãŸy∏pbå?kBŸ‚∫,¨?√R3±Ø•?#’=”«Sôøõ!ÚÈÛq?H¶ãò¢?ÕI„®¿®øJ,˚>¥@Æ?
;_»˜Äâø€Û¬æ¨øfÂ‚·ämøbz“Æø;“Ÿ¸—Õ¢?~bœd Kú?\ƒˆ·¿Æçøi∫yí®øâó{Å?QYJ˘ˇ≠ø°ªLﬂwƒsø≈€î<Ë#rø¯Q¬ërøò≥X9ù,ó?˜àñ:á?¿Y≠¿Nπ†?_Ï≥Ü/lôø…ûDQÇøæÿŸbG{†?¥ Ø«+Åø;UrŸﬁ*öøv‹Î0.§?<–z`∆óø ¡qª≈3ñ?R™hü”õßø«ç§¢éøc>~Aõ¥îø±$®y¡døq ^óH±?1Ì~}√¶?b@JzÖˆèøôû€D`æjøîëi#çî?m‹≈˚®?Ü§±@Ñ≠ø%%˚Ô⁄∑ø≠=∆h_≠øJ÷y∂ê?v¿Œ}‘áóøk[{<Äá∑ø{ˇ^ãèÉ?€oCE•?ÉåM¢Ñç?‰†A „sø≠A‹°©øãEñŸ€~?«ˇ”√Ü]¥ø°Sg \"≤øÆë>\[@4?0πrrñ®?÷de≤∫ê?€ê'0:®?Ú¬J√¯Çùø∫≈6àZ√†økÛŸ„Äªíø¯™ü{2¶ñø¯¶5BI≈¶?≈Õ¬°3¥?õq¢
Ø?ÿkìÌï¨ø\shµÿá?0ÜQîtb£?@À©S‘ã?ë 
ò?£M˘*ã´?∆ŒÂh≤?ÃqŸÆÒ∞?¨`mÔ«´Øø-{! Ωñ?Ùã=ttòøCsﬂb,pì?Àò€Ìf?Ô≠Â!ïZ™øÚöf†ÉEõøŒ˛ÿ’¯røXg‚A¶¡Äøÿ/∑ˇÒÛá?“€ê`YRéøv◊#ö√ü?Üë!q÷z{?≥R,™äX?™µ‰|ßÖ°ø>)á5Êúøü!ø»¨?£†e´ºµTø—‡ùP±§ø
ÕRUÃçø˝∆Æ(ÿ™?hIÙm£?† "Îéø÷^Ÿ?.ıêø⁄%π‚3ëøê®¸›ŒÕqøáæ‹£]ûø»a0ÖÃß?õ ±€∏‹öø‚Ff 8ê?o⁄∆~öÉì?µ}*gu?J„˛¿®Êòø}zΩÄ3Ñ?óÕV=‰Vûøˇáé˘çjô?:28E•„ê?ﬂF¨¿ÓF≠?UÄµãÂmã?=ÀÑCï∏®?¬i3·¶%óø!±ÀZÑåø.HÜ^w°òø≈‰‹√±?˝u©<zˆ†?ypG∑“∑?Ü¨äJÃÆÖø◊-?∆ï™?v•e§ﬁS£?.!ÿ·ßß?A*(πÅ
î?±Øæ»bÑø˘†à¡”ñ´?ËjìŸØüøïó„≤]„°?î◊Úù+}ø§9ΩâdzP?ÙÕ™çπÑ†?Óa—¢Æ§?ù˛¢∫okâø^ÁªhÉ§áøÎNYHZû?«∑h‚Ãòú?¡ÙS¢@-ãøﬂ°≠-ÒUøU]_¢|ê?pÁó»“u{?ø≈üµñZÉ?±w:Ëˆ∏ôø>Ï–˙•ó?ìùÛ]éz•ø{óv]5£øˆ	∆ﬂ˚Ω¢ø<_‹€gt£øïÉ∞°ƒÑ?|ñ‡æŸ`T?e
›Ú±Ñ?€†•<—éøµbáJÜêïø`(Ω>’í~?VFIf˙«à?èÏ˛≈Ùìøeü†»≤øü¢ß_bgS?zHDc≥´ø Ã"t+ï?•p»¸_RâøZïì<\¢?Vµêø5)Éø"Ig~IgøWB8ﬂvøsì≈ª+‘¢?ò°3a‚†?uäl¶åøôí_’’ö?œü‘l?¢°Gÿ,°ï?<
B?tΩ≤?µŒFN)&tølLne†jíøtÇC7£?+xÈaJ÷h?pûfX˜Uòø◊ûO†,’ì?•U„[™µøòÉ÷jh?_ß5&ÙïúøÈˆ 8cù?@MNi‘Æ•ø5ˆèˇÆAû?®°Ôi¨œçø›ŒG‰~1R?è>ˇ†¢£øÇy^D{øe‹~@:Qõ?Ê§nÂp5?éûSwÌÑ?ù|ÂS≠ø‡¨|'Júøkdø=ªª§øºBûè˝ãøÃ”wÜ¬™?ø.◊c°$§ø¡€∂5;ú?®Åùù7?‘··]™øŸ|J8n›õø€=Í?L∫uøòÖ‘ø¥@ñø_4‚—SÉ?Bﬂè;¢Àñøõ…AMPjo?aUDNØøÛì≈X•øU®Õ{)eøˆm‚Õëß?Q>e~3£ø|¶RDj ëøÄYù¥\Åø$È‹fìø”£AªW¢øuê¯ë2∞øwR€]“ﬁ™ø?¢2ì‚¬ù?a¶ÃQpF£øƒÊgıl?zkwGz‹ï?6ò1ΩpÎ~?zÃªùáÉ?_¿Ó/Bò?·∂jbw=õ?©©˙{ëïø"ƒï≥w®?Z≤Ê§PFÉø<Œü¸˛èø„9‹¿}å?‰à'ÙhE??⁄¿ú'>ç?©«ﬂ5iû?âmÂ}Ióxø‚3ï"Rí?~ï-¶Zäí?Å¡†¯´?ﬂÖ^‹\M?Õ8$Ì˙êÖ?ë†üyûëø5`tü:[©?í˙&ù•|u?x´C√SâøY¸˜˜Q¡ò?)π‹√“¢ø!Œ`ﬂê£øt~Úbõ?R¡vj)ø8°≈ófÅAø‡¢ò^êdn?ß∂/˚–`†øÖ»Ø@pl≠?nnÔ|*tøÒéBHÃ¢¢?ÉØøW:@†?¿áRH »ÉøÁhŸÉﬁU¶øÎÈÆ‚Nt?ãf√lí∑uøœ¥˜ªî?∞¯4ƒwÆ?ãyNaBXÉøpJ	Y«å?y‰hæÂûødFO¸ﬁ«ëøf3≤$s>ú?epR†hÅ®øyÑˇãËy?Õ)pŒbt?‹°j~8‰tø~¸üÒ¥≠?°|≤ÑÎHkøñ	}∏˝ó?¬?Ü=÷Ä?ºº≠≤æöµ?W°ıwø¯d“öwÄùø©ìÙ∏øg˚≤°Kít?à¶mˇ}GøíıHAø´?§‘#‚Ìëør#≥ØWøhå ﬂÔa£?öπ˙êØ?íÖ;YbL©ø]^9ñ?O‰ô6õø¥
ΩpzÆ?∏∏Vıñ{ø∞È°≥Uäø.Û ≥ö«†øû⁄ëò„%ø“°µù∏†?Ñ]˚üO&¥ø–â]áj?Œ´#êÄøXã˘ wµüø˚1Èf˚≤øc¢«Cmàé?{Eû¡2¯≤?z'6¶ø–˝±Gë?¯èøìöf∑?zµ≥ÿK•?Ã˙§ECÁâø1u˜ï&ò?p£ñ í©?~‡ÑÕ‡øt∂Öâ4ï?ß¿Ä`πÄ?äWT"[&ìø-¨#`◊£íø'G¶ËÌîø˝Œ&$R?B#éäö?\qqTn¢Æ?¨∆†Äﬁ5ô?å~ ∏Kîóøπ;√a·d?¬HÕV†§øsú´Ker?Jô≥¬=£ø¸∏™™üP∞øY!7Èåøôñ˝_+∞?Cù˛|õ?ônL.J˘†ø∂HÀb¨î?Õ/∫$—\?“äã}´p¶ø˜f÷}¿6®?¬yaÑ”≤ø˚+Œí¨çøx≥¥Çá™z?X‹$´«"™ø ˝/Sja§øÆ•Fª„Cø1¨@ˇÕ#í?R¯éë?˝nO Á]?Íhû!Ò2öøƒ¶˚$jÆrø‰∂‘˝˜Ú_?6“O¡¨ëøÌ ¿3Î÷≥?éJ;ªfø¶v
‚— ¢ø◊lÍﬁ∏¸ïøb”Ôg˙ôøŸ?˘M`†ø”›3µøˇ}ˆæ~qøWŒíã'>è?±ÿÕ‘Lå?bÅ3!{˜û?§a›úò?ZS√¯›ó?∆Îêª ?¬OcKûä?ô6?•ßø„WÊå¨%öøúﬁí†øH7ú€¬õ?	ñl:◊7]ø∞Âê2¥ Ñ?á>Ï¸•øÖB{*‰†ç?!w_‚ˇ¶ø
∑ø˜Zù?N
È¨Û»èøu¶k2°ø(-Å’Ñqø"èÇ’»pø.#<kuìø®±˚‡ÿú6øŒ»«æ…àø3aG°}tøøÿ<ˇWöøk*j¥Eg©øuœ]˙Ó…P?≥.\¿E”õøW8ò9úzêø˘C££k®ø º∞Mú?ÇÇ◊ô™?ô[J+¯LµøìD…¿W∞?√~∫Éü?QÁ˛Ñ«áød^ ‡;™?0ºóùsì?ƒıœ£G+°øI_‚ëø&ÙtZ)óëøiH„~†?å*æˇa€°øUc}(5uø,Bƒc≈ú?û–tA@hÑ?hè∑_µgó?uê©î}$\øGIzﬁÆûøÉP{ù¥™ø≠ªÒ–¶ønßO†ø8Å?"J  º˙Å?á-›'æíø°#zòD]ä?ˆ5?º∂–≥?~úu5ïáøÌÖ¿ô±ÀûøÚ&û7>≤?Sn]êøëWûBŸTîøç–b8Ω‹êø]„Bmâ†øÁD/a<≤?¬ˇ#¡æßø–ç?¡‰~øwº®aË&≥?u˘íj¯F?æØ¶øRÓ´?À…=ÛÈöøúTÖ®ƒ=?r◊DO®?˛gçΩ7ˇXø™Æı•¥áx?€¯Zjôq?uM/Œk.≤?»óP¡·≠øº‹P∆2‹¢?¯Iú≤&Xå?¯c<ElÇò?óó\¬*©≠ø	Û¥Ç˙$¢?∂õ¶°≥øj\[¶‚í?ΩÅ4)&Îõø.ÂÜ#k¥®?V‹üﬂ<˚?®ﬂ^ª‡;ø€c_wHî?˜È[?eì?®$µqß?6C&πŸåøS‡ˇÔ—x?√¡æ| Nør1¬g-§?2£¡‰ƒ¢[?;È”„$∏†?J°Eπ≤ø/7˜€«ü¶?úcäÉïT°?‹G—wuñ≥?œ∞≈,ÉÉ±?≤HÄã/ôø[U–ÿäz?®®:hV=WøÅDCaxnïø˛ròıÉ6Ñøˇ≤ˆÒúø=âùcË¢?/Dr%G©íøo¡∑à¶Ó}øpÀÁﬂ•	≤?hÕ"#Ünë?⁄Q9¬Ú˚xøîñnk;Ç?d›é\v	íøj{ﬂÎ∞1ã?Ô’<øw?ÁıÄ©´tø∑ëWå_¨øö˚A„›™?C‘eNû?F≥„éPûø6°ú™sÛ†ø@MîHöøoªgTxQ?"”X˝<ö?‹b·ò#3î?÷€,:ıâøƒ"ÈGÅ≥ø>ˇñ05jÉø5Wmß?∏ﬂcÄ©ê?ãºrﬁ{≥ø:≤ÚÀ`åî?üyo¥qXø7TÃ¬PÉ?%cﬁa°?`qTH€Ûû?;Åœ`jÉï?<@§ù¢<nøb“– ¥ûø€≥mv í?V—Çƒ4ôø(]?¥ˇ{?,dK‚Ó§°øÆãë€Â™øÒnymµ’Ä?Icˆ™|lÜø|â Í9v?ó™&·ëø#C≥ò"^?≈Y _E9∞øìC]6ü?UO†Ÿáí?•.`lõå?ñøÛœ é?˜ûÖïÓ‘Ü?D'◊@≥~øM+0Öõøü¨°ült¶?ñ!ØÉZ>ÑøPê∂ª5e?√»Ûb&&ô?hÄ$Oïø3eØê]∞øpÇ©E»iëøÛE!çéí?”U˚i\n? ám˝á°?C%PÚZqåøWôu;=ôø'Ö∆Bû¨~?œ\ˆ◊jêì?Y◊ÖùóhD?ôt~√i%R?Ã¨≤™∂á?ı:0 ~u™øËWO∫ËºñøÂ¿áW{•øM,_¸UEn?ˇ…ØÑçiî?è|·h£ã?v˛´ñç1≤øÅ¿√Á`ëøBZY^ñœB?._´≈&ÄÜøêh®8´≠?é>©†Èø´øœÆáû∞ûò?<M∞ ©{s?Û∞>àﬁéö?ö‚Î^‹ù?ÃÉY@g£ø‘ÊïqßéøL“~i&p?§ß»!‚Êlø·WöjéôøªÑxa¡∂óø“¨* Q†ø]M÷\˘"eøoE;>é?ïE8·2´v?ß(—qπrøçó9 ≥˙£?_èÙ/jsá?(ÒmÖ¶®øèów@±øø¯∫º≤?ÿmﬁp”™?ÿäùp∂®ø`h,úœyÆøàºÇ¿æ®øîùe≥v®øë”ê™™?ÎMÜè˙~ÅøŸ†æCi?íﬁ`=(°øœÙÒT∞[†?J§¨`Õaß?ÊúÒ‡õd¢ø∞ÏcÀ£?°˛è Pé†?ñ}æí{øBîúP;ùøJ≠ÈÂ∆S?j8ö`é◊¢øÃdLÇ∂#ûøÙ•j“uû?&             #&                     # Polygon zkEVM Quick Start  The goal of this quick start guide K>      ã>      # Polygon zkEVM Quick Start  The goal of this quick start guide!õ>      €>                      C>             ã>             €>             v   
content ˇˇˇˇˇˇˇˇˇ*string8
3vector ˇˇˇˇˇˇˇˇˇ*fixed_size_list:double:7688j
lance0.17.0z
lance0.1x   ´~ £|*l
0 ˇˇˇˇˇˇˇˇˇ*struct

null_count*int648
	min_value*string8
	max_value*string8 Î}•?         LANC