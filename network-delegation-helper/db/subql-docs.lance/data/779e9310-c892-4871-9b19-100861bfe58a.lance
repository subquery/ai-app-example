# Base Sepolia Quick Start  The goal of this quick start guide is to index all transfers and approval events from the [Wrapped ETH](https://sepolia.basescan.org/token/0xe377517b4d95555052346c789e5b2b1cf8e4189e) on Base Sepolia.  <!-- @include: ../snippets/evm-quickstart-reference.md -->  ::: warning Important We use Ethereum packages, runtimes, and handlers (e.g. `@subql/node-ethereum`, `ethereum/Runtime`, and `ethereum/*Hander`) for Base Sepolia. Since Base Sepolia is an EVM-compatible, we can use the core Ethereum framework to index it. :::  <!-- @include: ../snippets/evm-manifest-intro.md#level2 -->  As we are indexing all transfers and approvals from the Wrapped ETH contract, the first step is to import the contract abi definition which can be obtained from from any standard [ERC-20 contract](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/). Copy the entire contract ABI and save it as a file called `erc20.abi.json` in the `/abis` directory.  **Update the `datasources` section as follows:**  ```ts dataSources: [     {       kind: EthereumDatasourceKind.Runtime,       startBlock: 6958775,        options: {         // Must be a key of assets         abi: "erc20",         // This is the block that the contract was deployed on https://sepolia.basescan.org/token/0xe377517b4d95555052346c789e5b2b1cf8e4189e         address: "0xE377517b4D95555052346C789E5b2b1CF8E4189e",       },       assets: new Map([["erc20", { file: "./abis/erc20.abi.json" }]]),       mapping: {         file: "./dist/index.js",         handlers: [           {             kind: EthereumHandlerKind.Call,             handler: "handleTransaction",             filter: {               /**                * The function can either be the function fragment or signature                * function: '0x095ea7b3'                * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'                */               function: "approve(address spender, uint256 rawAmount)",             },           },           {             kind: EthereumHandlerKind.Event,             handler: "handleLog",             filter: {               /**                * Follows standard log filters https://docs.ethers.io/v5/concepts/events/                * address: "0x60781C2586D68229fde47564546784ab3fACA982"                */               topics: [                 "Transfer(address indexed from, address indexed to, uint256 amount)",               ],             },           },         ],       },     },   ], ```  The above code indicates that you will be running a `handleTransaction` mapping function whenever there is a `approve` method being called on any transaction from the [Wrapped ETH contract](https://sepolia.basescan.org/token/0xe377517b4d95555052346c789e5b2b1cf8e4189e). The code also indicates that you will be running a `handleLog` mapping function whenever there is a `Transfer` event being emitted from the contract.  <!-- @include: ../snippets/ethereum-manifest-note.md -->  <!-- @include: ../snippets/schema-intro.md#level2 -->  Remove all existing entities and update the `schema.graphql` file as follows. Here you can see we are indexing block information such as the id, blockHeight, transfer receiver and transfer sender along with an approvals and all of the attributes related to them (such as owner and spender etc.).  ```graphql type Transfer @entity {   id: ID! # Transaction hash   blockHeight: BigInt   to: String!   from: String!   value: BigInt!   contractAddress: String! }  type Approval @entity {   id: ID! # Transaction hash   blockHeight: BigInt   owner: String!   spender: String!   value: BigInt!   contractAddress: String! } ```  <!-- @include: ../snippets/note-on-entity-relationships.md -->  <!-- @include: ../snippets/evm-codegen.md -->  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; ```  <!-- @include: ../snippets/schema-note.md -->  <!-- @include: ../snippets/mapping-intro.md#level2 -->  Navigate to the default mapping function in the `src/mappings` directory. You will be able to see two exported functions `handleLog` and `handleTransaction`:  ```ts export async function handleLog(log: TransferLog): Promise<void> {   logger.info(`New transfer transaction log at block ${log.blockNumber}`);   assert(log.args, "No log.args");    const transaction = Transfer.create({     id: log.transactionHash,     blockHeight: BigInt(log.blockNumber),     to: log.args.to,     from: log.args.from,     value: log.args.value.toBigInt(),     contractAddress: log.address,   });    await transaction.save(); }  export async function handleTransaction(tx: ApproveTransaction): Promise<void> {   logger.info(`New Approval transaction at block ${tx.blockNumber}`);   assert(tx.args, "No tx.args");    const approval = Approval.create({     id: tx.hash,     owner: tx.from,     spender: await tx.args[0],     value: BigInt(await tx.args[1].toString()),     contractAddress: tx.to,   });    await approval.save(); } ```  The `handleLog` function receives a `log` parameter of type `TransferLog` which includes log data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  The `handleTransaction` function receives a `tx` parameter of type `ApproveTransaction` which includes transaction data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  <!-- @include: ../snippets/ethereum-mapping-note.md -->  <!-- @include: ../snippets/build.md -->  <!-- @include: ../snippets/run-locally.md -->  <!-- @include: ../snippets/query-intro.md -->  ```graphql {   query {     transfers(first: 5, orderBy: VALUE_DESC) {       totalCount       nodes {         id         blockHeight         from         to         value         contractAddress       }     }   } } ```  You will see the result similar to below:  ```json {   "data": {     "query": {       "transfers": {         "totalCount": 182,         "nodes": [           {             "id": "0xdd94e1fb88e72d1c3e9b473548ac4ff2cb40c3b8c931219480f930d397c542e3",             "blockHeight": "6969377",             "from": "0x67bF7951cdDCF57177D282C901160c7156CcC252",             "to": "0xeB4bF56d8331b2c89C42949eA0A60F400CD84684",             "value": "20000000000000000000",             "contractAddress": "0xE377517b4D95555052346C789E5b2b1CF8E4189e"           },           {             "id": "0x0220fad99d9f1e78757a2688bc922a3252ec7ebf527a461b76be3bae34082bfd",             "blockHeight": "6969399",             "from": "0x67bF7951cdDCF57177D282C901160c7156CcC252",             "to": "0xeB4bF56d8331b2c89C42949eA0A60F400CD84684",             "value": "15000000000000000000",             "contractAddress": "0xE377517b4D95555052346C789E5b2b1CF8E4189e"           },           {             "id": "0x392c0905e97bc39a95b7096026d7f9554ff6293b95e4a55387e34e1a448ec9f1",             "blockHeight": "6970882",             "from": "0x67bF7951cdDCF57177D282C901160c7156CcC252",             "to": "0xeB4bF56d8331b2c89C42949eA0A60F400CD84684",             "value": "9177390000000000000",             "contractAddress": "0xE377517b4D95555052346C789E5b2b1CF8E4189e"           },           {             "id": "0x02c4eb0063fb19904c7f7bb5b250424ed8a7fec332ea69eb2c1ab0ab2f754ec7",             "blockHeight": "6978543",             "from": "0x67bF7951cdDCF57177D282C901160c7156CcC252",             "to": "0xeB4bF56d8331b2c89C42949eA0A60F400CD84684",             "value": "6900000000000000000",             "contractAddress": "0xE377517b4D95555052346C789E5b2b1CF8E4189e"           },           {             "id": "0x9b38bcee8fbda2e18ff4d5b339ea626f65a61b5b840a97fc88ac6cf3b7fac367",             "blockHeight": "6969893",             "from": "0xeB4bF56d8331b2c89C42949eA0A60F400CD84684",             "to": "0x67bF7951cdDCF57177D282C901160c7156CcC252",             "value": "6457009580745085126",             "contractAddress": "0xE377517b4D95555052346C789E5b2b1CF8E4189e"           }         ]       }     }   } } ```  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/tree/main/Base/base-sepolia-starter). :::  <!-- @include: ../snippets/whats-next.md -->         ›       wÅí`≥?'ß{?cñ≤ø`>ïæøº¬>ﬁwø¸’~ìÔïøÀﬂ]9÷¥?•†€K££?ªá»˚ô?€bŸãY?Æ4πZ´ø™AªpT?-!@Vy¨?ﬁp |Ä≤?DﬁÁπª9øªË4ﬁ†ui?|√ZCÑ[?◊ﬂ’gm§ø>ﬂÖaø1#˘† ﬁÄ?çQ/‹ﬂ˜§?_, u∫ûøük €2\î?“å$∂≈Åø;«ÚAﬁëêøÔú=EÕ∆?N “æ!£©?çÃ:¶Aó?Íí<öî…óø/â‘0S≈Æø˝r69Ï`?Á4ª»ÊôøñBB	8é?oà‰pUıtø´€è G¢?h	c∞—øcyØÉø3—sMyµ?˝ÍÆã¢P]?We?àÌπõ?è!◊∏ƒ≤∞øòÖí£‚˙¢ø:ŸÁ‡Ç4Öø˙í_Œ(øh#I£R®øÙ,aù≈≥üøâ]¸ÈÏ®øaÅá 	&ù?œ<ú„ÃçZ?dq≈Ê_¢§?≠ı1^t+Ñø÷ÈÁ°?¿åûeZæÖøpœ¯`GSy?
†> ’R≠øqı¿iÔ©?u‹Åê¢¢ø°iháË•¢ø≠hâ,éR?åÜ∂¢‡0@ø‘ëL≥Àìø#lÙA∞?1_3 !Ä§øy)ìì∫íøC\&8˙ûøP ó\4Ä¢?∏∫Í°Ädùø6ëGü7V|ø¶Ãw7Èíò?Äµêµ?E`‰øÊöønHiWù¨µ?P˛ÅÅÏ•?öÁ¸Åu¨?ÁyG¯§4£?ï˚ÎΩÇπPøÔëÅ«≠é?x`‰ãœãø'q~y∑¨ø°9·xá7øwr]c]˝¢?çAá?ZJ<?SKû"ôø˙˝Ó_Qx≤?TÄ„√–ßø’`∑[‘≤?È∆&øf5™?QûjúiàøqıÔ<È+}?¿¸°€C©Üø…û¯¬HUu?°ˇN≈ìø¢Œ[√¨ù?Ÿ≈Xô5 ñø[ï».Ê!≥?œÈ0a_´©ø`“ûÊròø◊3âP¶≠øQàC‡èu£?ôú õ¯§ø5õ«a0≠øP3µùæè?sÅÄü¶ø8aØŒÏ=øëX«˚µê?¨ôp@/¥?u__'Æ§?ΩÙ$ éƒó?0}Ë!—î?â¯˚ÉP˜úøK-èJuÆMøGÑê=åZ∏ø·¨∂“”~ø’-Ñöˆ‘øO®Bd⁄¸êø1\_Cù¢?ß[/≥Û)ÄøC_ˇûÌ£?U∞¨ÖpÖøàX≥Ñk§•ø[Dﬁ+ X?.9ßøÇ'¶øç£‹˜òø7¸n∫e°?±
HπéïøoGzIJä?Ês¯Üù?É§pπ—2íø:tå¡IÓ¶ø`…ö∑øq8ø”ï
U*€ÖøyŸ“JÒVeø1,πi∑~?˚9=£8=ãø‚≈Æ,R⁄s?-“WüëYéø`¬¡˛¶çøÂ¨W™n¢†?≠ÒÄOˇôøÅZb_≠øìQûè?Ù’7+ î?ø*B™[OÇ?}Ùçµ≠–yøÄÑ∑¿Kî´ø`ˇÇò‹ù?∏,=¥˛gø†”¡óïª?ı¡·D˘òø√µ†’˘î?,ë¶¢˙Ã§?ÁôaH0ß?aÎñŸ÷∞?Áˇ»¡õ_lø|‰ÅXÇ?⁄4[çc?lœsﬁ€£øØÒhEE,c?N)éáµ?¨Ö\ v„üøn –ùH>k?·s	Ç%)£øw∏®¢—ï?ˇ¥“$A©ø˛◊|ôøÄ¶
∏z]ë?´ä'‘6¨ødI#‡º™úøﬁ’≤ÇÕ£¶?…^k∆‘#ê?ê·~Æ GÉ?1H4`≠≤ø;Ö"˛›ê?UJÂ®ì? ÷x#“∫Øø<™lË˛sø5›ú^Ífeøäë%s,ôø|è◊‹9°øüg˝wéßøﬁŒödSéøÚê£Â≤dï?ËÏl·‹”ßøIuŸfe&ü?cÚÇ_UÉ•?‚Qﬁ«äL?ıª—CDú≠ø§£¢í∞?â¸eΩ9ÿØø˛ÓÄ_·,éø0W≈êéø|}ÍÆ•≠uøae<c¬‹¶?jÃ˚j‘díø~F‡}çíø"aØ…}°ø2ÒDôÿ?Å?s\∂k|±?j≠IfﬁrüøD—µ´?bÀHKRr?Ω„?Í4x?ŒF˜HC? Ñ∫'ìC±øÔCôûîoñøNyadjœSøh*˛Œz!¥?;Õ<òòWëøFˆ‘†?£4’ÿÅé?ÒùπLK†?pa@¢?µâQ-âøï rÊñ◊õø∆}¢v}?(P˛ÕL∞?îÜ≤°Ø·¨ø“‚≤(ÒÉ?˚ßﬁ˜g?'= ÌY©øï‰œ£!d©ø~∞††|™?†u9óutø±…3í±ò±ø∞ΩãVjùøóJ&DLÀÆ? ÊZ¥ mØ?õ¢c¢£øt›í_Ò¢søÂo@ ◊S£?Ä•7ˇVÇí?ÚÜ£«…¶ã?¶I*SÃµøÈ|ô§	Fkø V–Ä&?œ	àÊç’∂?ÈT¶VgŒë?⁄˘?÷Q¢øˆé—<´≈ûø[üê¢pkí?âÕT;îwV?≤ØÈˇ$W®?‡ÚùæsÊu?+]¸òœÏÄ?‹”•‰tíø˘§CBº˜•øáDyù˙†ø5˙´`{rø˝Ôê{Âí?”$¶"ño?Á›ezì?AZåO;€ó?ı¥6#¿ˆføÇ∂`üºl†?>˜‘†±?ˇÿπ£ﬁ◊¥?µNû™)fò?∫ÔúVüÂ¥ødµ†«ç®?ß˚k?:ÒòøLü”ßøJ+∆zñøÜﬁŒ˝Vd¢øÖh€üVú?™G≠?®‹ë?ñ«¢ä°øA5
ªª›ùøûΩLwK0òøÈ∫ŸÁ}Xç?8oî£ù&®?Õ!A¢¯†øÒXÂ¢Wå¶ø’›⁄ôt°? €üÈ˜™?1‹\∏Æ£?xéT!Éøn)2Xã?ïçS†8zø:ˇΩ<Êi?nHè@8±ø%íóKñ?e?Ç€^Fø%‡˚äUøÌßäüÇ†ñø¢n5%8yÆ?ÿ˘ﬂÒΩú?€úx>kÕîø„Çÿ>âtØ?πìUˇävõ?	?¨áøªÂ•Ö±`?+°úÒHßø=’πSN<Ç?Üi\ëßø0VΩ{Ö^f?é©¨áﬁÀë?´–õÂã†?:üœ∫%Ωûø>f¢3)8éøî¯&»•ó?Qr„¶û†ø5Ëƒıˇíø4>˘ﬂ=Lßø†„˛~å±?ÈVΩØRq?#©XOx?¨ﬁ~ˆ¨¶øûìı”3Hw?Ì[÷í»z?ü≥˝é¨ñør·˛Ÿ◊y?ó…¡Éû´ø√¸∆í?√ÿﬂe»©îø4öEÇıò?B1!ËŸ´øŸª2¥©÷t?ÚÁówã§?`{‚‹éø €ƒ@±¨?RÍb8vó?û±ˇübSì?Â©öb™øß`	{E}ë?y{$Êÿ»çøû›ÙÌî?*Ò∂[]´?rM5>âãíøƒqZú£Öø ¢¢ZY?R˚=±Nô?∏∏°|f{øtåãÂÃ]ø«ü¬@ˆk?Î†at£?q(∂aò<°ø£L’µ?É}Ö#\ªøârí{Ùeï?•¡ù¶˜÷Å?›Â9ZââøPâ˝˚Eû?ì∞dGYÒL?yﬁe=∑˚©øªl	3LÒ∞ø.∑oF±Ç?ÄW69ù‡Üø<Ï¨¢&£?™Øïm3Wí?;‚D^tî?ãvO˝Å£ø9ká¯\}?{]⁄˛2°?	Û§3Õãø‹∏DG’{?ç&zçÜ†?π0óª+ájøÒ¡Ò–ß?k'∑ﬁPßïøXMé=¶Æg?•i	_É±¢øM›©A[ñ?º~lJ%@Uø,.ÈÉ¿%®øQj	€JÉ?ÄåXByJïøÈz:Nñøƒ5ç"´?ÿ&BÓîøcv?<Ö;°?¶{ìb$‘¢ø‡™	ßßΩåøEJ‘á)¶ø–æ∫vﬁ–p?µî$∂X›Äø˜fô®Yú?ùµ	gzé?†ØrÀª®µø¯é∑Ë¶≈±øVqWm—ùø’*·”é?u€FÇ˜ıîø!öLÅ°øÅT≥úæ}Ø?uwÅ∏…≠ï?2®ˇ˙üñøhΩfY˙óøôÍÃ¥2Éøı*qC™Å?íõ75gñø^ôÇ¯jÜ?æz ~“¯¶ø˜F˚øÌÄØø®P≠#Êôø°ªàkYz?…Ç®LH£é?Ìﬁ/∞høwùJ\Ä„Ü?óﬁ~Dœk?f——0–CÜ?îØƒ6ªKåøôËÏò?ôº‡W’`¢ø3±Ø+˜™?“h£ÿ`QP?LU¶/°?á‘º¸±Ωí?*‹∏Ê
∆≠ø-†¬$´ø!∆Ôñ•øVn7˚‚÷Øø?6ï¬Mòq?†Û>Åº∆ò?Or,îÒîöøÖ∫f˜ÜáøI£≈√¬sø…ÓK˚ª~ñ?™1◊¡•?•ÙhÑ`PÄøG#fﬁ à?ìº=õ¥?äSÔ°+Æß?∆≈:ëø®b∂¶qVïøvÓ£>º©?¿€
√iúøab–bYÀç?)ïÀ‚‡;v?3R„≤SÅø˜¿‹ ≤r?m9*F|xüøuÇ°BA¶zøÍááb{d?â˚§Á—Âç?Øƒ'ê.Åø˚V-·∑æôø,ã`o§ö?áô	»èﬂ¶?ôwàæ<≤?7GÉˇ†:Å?õ‹¶z]møêæª(âø√ \•»¨øI¬ kuøÌÏÆ"Q7øóòòíõwø8‘nB¡è¨?’=ÇÄTAõ?åóvÉÀ◊¢øÀ5p; _k?çŒΩΩãøıÔ≈⁄âŸë?òü∫wøÛ2lè<‚à?ÁK>«^•?6£ÕDX≥?EÇbëJêø\˝≠§‚ÌùøØú¶eôø’	tﬁ)⁄yøo_Õ"ê"™?Ø/Ü0Üã∞øa>0≤*„ã?^ú:áïøö•2ˇ«çèø/©Q}${§ø|è“#H–àøG¬hùãõÆ?dÿG¯ı{úø'ﬂòÑ\ñ?IÅ´N¨?>#7·cÜ?˚àœDtõ?w8pΩ\z†?_fctÊG?aﬁµ]GÈqøÔJìU?Mø˙h :è™?ÒÁ?„CûøŸBêÉfî?+»Öπì>£øG˘+_ıRÆ?$@iÇä•n?≠gatüø∆W3+Ω¨ø&Õô®ë?wı›~œ¿^?ª#YCÜÆö?:‰‡~2Yì? [i™ûÑ?@Ó¬Ÿ$´ø¢Y„:∞~?⁄NBÜ·e™?§\Ò?ø¶ø„õ;ˇí?Ü“«(AíøH˙˚_ä†øsNœ‹≥ø‡Õ∞◊?åøwcQ&öø"Ãnﬂqç?$Ç˜Äo>‹gtãÈ◊ò?R~ƒBºî≠ø¯ú‰‹`áïø]Hµø!¥?¨´Ê_ÈÅù?EEg\‚ìøs"M˛é≤ø†† …ıªøQﬁ´|Ìûû?ˆ‚ˆë|°ìøE7±v Y†?JN˝Ó„â¢?Uíé’ZV£?\•»oHÅ?π∫@¢9Mï?CrÎõrõøj‹†òÍ9ìøƒxe»≈Ÿãøqô™Êˇv•ø:Ü2óøÍ/€F3j?ﬂË“€yƒìø˚Éb⁄ [òø[€ÎZ0°øı;Ÿ°P±øz’}a\ø„#úı≠ˇà?∞lÕÛ37©ø¨§÷zaü?Wh%Ö£?¿gæ_Ÿ¿ú?o!ﬂ≤˛õøõ<#ãùøÇ¶≠"œtø+Qìl∑U±øY£Û!u)†øõÙpbEf?M£åb {âø£¥q£Lìü?úqu[}–†?È˛8P<íøîÄFÈÄ?Æƒ_:}¢òøJÕêKò∞?CÏ»hOèvøkß,⁄ 1cøÚ8Ë<=⁄6?¥¶Õ∆∑hñøV∆•{¥p}ø$Êa∫s¢?!Ñÿ}Ì∑ßøY•«Çà¨c?éd¸u{ø^g‚«˚õ?2*X¶àø˜QlÜ»wøÍbÀŸÿx§ø1–dË†óîøä´PAûzø
é“ré§é?k˙ì»£Ûî?_«Œ«Ùâ?ﬁÖ.à°?´°¢$©ø∏ÆrJ;ìÑøQÉ±2ÿ¢øY“8q≈´?hƒ¸aA?ÜMœÅ™?Ωq;¸Åó?TÀø^≠O≠øÊ]KÅ2±™?•Yy%E∞?X\ò\˜£?MHtúë?]µBEëørühÁvw?˚frú°Ÿâ?l∞˛<˛†øI`>ŒC≠?¶Ä_»ïøäÃƒ ¢øÇ—ñ£?O⁄cxøIµ |÷î?Ìg&:í?©AkZ6.êøBe≤nrÆº?€uﬁ‚ªvÑøÊ⁄£y¯≥?~#I˘u?€∆D¶⁄0løX›"&dx?Î)S{˙–õ?ç…àxøüZ…õ∑•?Œö˜∂õü?7ö–‚î“ÜøO—–¿A€•øë3ëı{2åø‡ƒbda£?!^2ÈJ≠ø˛J˝…a•?Ò˜°Óùø≥–1î—–¢??”÷~Ó®¢?Ta"î≠‰yøqR!Èñ«q?¡+ﬂπKpëøS÷≥C£©?¡‘´’ÉT?û$~A‚óøªΩ§ÜíøYµc8–k?:zø{é∑øi^RÿÏî?	ƒ‘^êiï?ä¡#ä∆†ø˝SÓa÷[í?ßºµ\Ïà?—_s≠†øáÀ∞•’˝òø¸™®6BÉpøon˝Ñò?ƒπS(uCã?W51ÚÏ—≤øSè∏QßøSÕ•¢|ª`ø:u‡˙Ç¶ë?Gíg1ç3q?Ÿ>mµ3§øWxﬁ`Ñ•ø~í¡•Òxìø¸ôÅóSíøb>ãkù¶?]gËD'îøüî§∆ﬂQ®?km±i¡â?¸î:3á≈∏?Ÿèò…°£?ç2°ùa◊ïø% nú?\adC„˚y?y—ÿ|üø2U˚7ŸMã?Vsª¬{AëøÏÍ°ùì?ˆLnY∂?¬»&TÀ1®ø{±b~èÆ?éù¶ÖÅ±?úóÆSÒÓÄ?4SRyøÄÙu´Û`E?Ñô;›.yuøms P™ÅøÃë`9i~ø˙cÙ∞°øMïÄ|/‹¢øy_À"äçuø RÆö.^ûøu%Éq∞øO®m‰6°?‘c:¯≤§øGàL„ôp?)˜˚¯]né?bù*ﬂ3â?xñ]Ü∏üôø(Ì°ÏÅ¨?ºcÖ_âu?ÁŒ?öÎê?Îﬁ	DÔW£?]∆Ôõ2üöøR^=ÑwÑøGåøi—m•?À¢∫˝°?¬ua»¶?*≈&óûù?*(G,òø∑®˜£üøZß°x[
ú?`·}ÕPføîpeﬁ∆ñø»≈Ñõõø? La¨ø—á\—ó?I“ °ü|ø\æã}ù?rmµ™Ñøº'¯n?Uø®6Î]í{tøè∞BFõ®øU6°¬q°?ã…¬ßûñø÷*Må]ëøkl[/	ö?√Ò&≥ëøﬁ^7Dì∆õø„¡X◊Oú≥?Úë9;æñø5Ç«ñi$•ø/˛“—ö†øÒÁˇH±?_πZ˛Æ≥øWπ—yÌœí?í?¶"õ´?Ë,<˙"Kuø˙s@¿â…x?F27!•¿¶?!Îí9‚}ø{gÄÕ•ø¯>¯Î®?z+ƒyÒëø•∞˙?a2Æ?.ÅTΩ2è?WÉN÷-Ü?πè~[˛Æø ¶~lô0?às`{^ÿ•?ı§Å\8°?ˆI(\˚£?éQ⁄v5öø`˛–Ì°TôøƒWbå≤pø)…Lˇé£?ú--ﬁ >úøY(ﬁEªïøPÿ&zï?ÍÛoú∂t£ø¥¿ı™ìå?ÔJoÿÊaìø∑%ìœ•øUìk Ú•øßDwËrÖé?ï‚Wj≈Pôøå∏c^ úø∑ñ.ÂAòY?%ÑyUà√ïø=√§ïP?x>ÔÁî?BO√Í°hø/ÂI¿R◊Ü?#–Å;yønBäS«êNø‰Z›ûÂ¢øå÷ˆΩo*ølI≠™søÙ⁄Ø˙F?;¸+Á/MÅ?ıî§Ñ√±ø¯:„Ï∑°ø˚Â’1ïxø+Wuﬂ¸I†øV[‚fGrø©”hK°øè∫È¡†?‰ñ<ÅÀy?ºc©‹¢?5∫Aº«¸Ñø¢ªá˝˘ô?l<;çríø,¥˜“©e¢?´`†‡l∑íøï4r"iS£ø[(£]øò8Íœz¥øø∆àD°°?›              Ì                      # Base Sepolia Quick Start  The goal of this quick start guide i9      U9      # Base Sepolia Quick Start  The goal of this quick start guide je9      •9                      9             U9             •9             v   
content ˇˇˇˇˇˇˇˇˇ*string8
3vector ˇˇˇˇˇˇˇˇˇ*fixed_size_list:double:7688j
lance0.17.0z
lance0.1x   ıs Ìq*l
0 ˇˇˇˇˇˇˇˇˇ*struct

null_count*int648
	min_value*string8
	max_value*string8 µso:         LANC