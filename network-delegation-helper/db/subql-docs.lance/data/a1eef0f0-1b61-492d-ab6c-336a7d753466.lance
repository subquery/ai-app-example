# X Layer Testnet Quick Start  The goal of this quick start guide is to index all transfers and approval events for the [Wrapped Ether Token](https://www.okx.com/explorer/xlayer-test/address/0xbec7859bc3d0603bec454f7194173e36bf2aa5c8)(`0xbec7859bc3d0603bec454f7194173e36bf2aa5c8`) on X Layer Testnet.  X Layer is a ZK-powered layer 2 network that connects the OKX and Ethereum communities to allow anyone to take part in a truly global on-chain ecosystem. Using OKB as the X Layer native token, users can move value seamlessly between OKX and X Layer  Please initialise an a X Layer project.  <!-- @include: ../snippets/evm-quickstart-reference.md -->  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/tree/main/XLayer/xlayer-testnet-starter).  We use Ethereum packages, runtimes, and handlers (e.g. `@subql/node-ethereum`, `ethereum/Runtime`, and `ethereum/*Hander`) for X Layer. Since X Layer is an EVM-compatible layer-2 scaling solution, we can use the core Ethereum framework to index it. :::  <!-- @include: ../snippets/evm-manifest-intro.md#level2 -->  As we are indexing all transfers and approvals from the Wrapped Ether Token contract on Skale network, the first step is to import the contract abi definition which can be obtained from from any standard [ERC-20 contract](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/). Copy the entire contract ABI and save it as a file called `erc20.abi.json` in the `/abis` directory.  **Update the `datasources` section as follows:**  ```ts { dataSources: [     {       kind: EthereumDatasourceKind.Runtime,       startBlock: 5462000,       // Usually you would set this to the block that the contract was deployed on       // However on this RPC, they prune all logs older than the most recent 10000 blocks       // When running, either use an archival node that has no pruning, or update this value to be within the last 10000 blocks       options: {         // Must be a key of assets         abi: "erc20",         // this is the contract address for wrapped ether https://www.okx.com/explorer/xlayer-test/address/0xbec7859bc3d0603bec454f7194173e36bf2aa5c8         address: "0xbec7859bc3d0603bec454f7194173e36bf2aa5c8",       },       assets: new Map([["erc20", { file: "./abis/erc20.abi.json" }]]),       mapping: {         file: "./dist/index.js",         handlers: [           {             kind: EthereumHandlerKind.Call,             handler: "handleTransaction",             filter: {               /**                * The function can either be the function fragment or signature                * function: '0x095ea7b3'                * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'                */               function: "approve(address spender, uint256 rawAmount)",             },           },           {             kind: EthereumHandlerKind.Event,             handler: "handleLog",             filter: {               /**                * Follows standard log filters https://docs.ethers.io/v5/concepts/events/                * address: "0x60781C2586D68229fde47564546784ab3fACA982"                */               topics: [                 "Transfer(address indexed from, address indexed to, uint256 amount)",               ],             },           },         ],       },     }, } ```  The above code indicates that you will be running a `handleTransaction` mapping function whenever there is a `approve` method being called on any transaction from the [Wrapped Ether Token](https://www.okx.com/explorer/xlayer-test/address/0xbec7859bc3d0603bec454f7194173e36bf2aa5c8).  The code also indicates that you will be running a `handleLog` mapping function whenever there is a `Transfer` event being emitted from the [Wrapped Ether Token](https://www.okx.com/explorer/xlayer-test/address/0xbec7859bc3d0603bec454f7194173e36bf2aa5c8).  <!-- @include: ../snippets/ethereum-manifest-note.md -->  <!-- @include: ../snippets/schema-intro.md#level2 -->  Remove all existing entities and update the `schema.graphql` file as follows. Here you can see we are indexing block information such as the id, blockHeight, transfer receiver and transfer sender along with an approvals and all of the attributes related to them (such as owner and spender etc.).  ```graphql type Transfer @entity {   id: ID! # Transaction hash   blockHeight: BigInt   to: String!   from: String!   value: BigInt!   contractAddress: String! }  type Approval @entity {   id: ID! # Transaction hash   blockHeight: BigInt   owner: String!   spender: String!   value: BigInt!   contractAddress: String! } ```  <!-- @include: ../snippets/note-on-entity-relationships.md -->  <!-- @include: ../snippets/evm-codegen.md -->  ```ts import { Approval, Transfer } from "../types"; import {   ApproveTransaction,   TransferLog, } from "../types/abi-interfaces/Erc20Abi"; ```  <!-- @include: ../snippets/schema-note.md -->  <!-- @include: ../snippets/mapping-intro.md#level2 -->  Navigate to the default mapping function in the `src/mappings` directory. You will be able to see two exported functions `handleLog` and `handleTransaction`:  ```ts export async function handleLog(log: TransferLog): Promise<void> {   logger.info(`New transfer transaction log at block ${log.blockNumber}`);   assert(log.args, "No log.args");    const transaction = Transfer.create({     id: log.transactionHash,     blockHeight: BigInt(log.blockNumber),     to: log.args.to,     from: log.args.from,     value: log.args.value.toBigInt(),     contractAddress: log.address,   });    await transaction.save(); }  export async function handleTransaction(tx: ApproveTransaction): Promise<void> {   logger.info(`New Approval transaction at block ${tx.blockNumber}`);   assert(tx.args, "No tx.args");    const approval = Approval.create({     id: tx.hash,     owner: tx.from,     spender: await tx.args[0],     value: BigInt(await tx.args[1].toString()),     contractAddress: tx.to,   });    await approval.save(); } ```  The `handleLog` function receives a `log` parameter of type `TransferLog` which includes log data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  The `handleTransaction` function receives a `tx` parameter of type `ApproveTransaction` which includes transaction data in the payload. We extract this data and then save this to the store using the `.save()` function (*Note that SubQuery will automatically save this to the database*).  <!-- @include: ../snippets/ethereum-mapping-note.md -->  <!-- @include: ../snippets/build.md -->  <!-- @include: ../snippets/run-locally.md -->  <!-- @include: ../snippets/query-intro.md -->  ```graphql # Write your query or mutation here {   query {     transfers(first: 5, orderBy: VALUE_DESC) {       totalCount       nodes {         id         blockHeight         from         to         value         contractAddress       }     }   }   approvals(first: 5, orderBy: BLOCK_HEIGHT_DESC) {     nodes {       id       blockHeight       owner       spender       value       contractAddress     }   } } ```  You will see the result similar to below:  ```json {   "data": {     "query": {       "transfers": {         "totalCount": 2,         "nodes": [           {             "id": "0x16893fed2e2039962210d32c09f23e695be2abe6830992108746531150c9a8f3",             "blockHeight": "3238561",             "from": "0x762446eea81874C7CAC10dda5854E1d13BD25e54",             "to": "0x8a8514e4b0D96Ef66Df57421d9cc64eecA349287",             "value": "1000000000000000000",             "contractAddress": "0x871Bb56655376622A367ece74332C449e5bAc433"           },           {             "id": "0x66929d3ff88d0effb04f6f7728408cb8c6809d43fb3aee9c96b77dc02107e960",             "blockHeight": "3238506",             "from": "0x762446eea81874C7CAC10dda5854E1d13BD25e54",             "to": "0x8a8514e4b0D96Ef66Df57421d9cc64eecA349287",             "value": "1000000000000000000",             "contractAddress": "0x871Bb56655376622A367ece74332C449e5bAc433"           }         ]       }     },     "approvals": {       "nodes": []     }   } } ```  ::: tip Note The final code of this project can be found [here](https://github.com/subquery/ethereum-subql-starter/tree/main/XLayer/xlayer-testnet-starter). :::  <!-- @include: ../snippets/whats-next.md -->         „       @∆a•?ß'á™ÛÉ?Hú¬[î±øä¯ì†€%ï?Ω/?ﬂ2°ø‡N}{2ZÆ?»)t=UÆ®?˝m^ª°?GÛ˝]jG≠?ÜêÜbvø?µnAæù´?»π«≤⁄x?≈^5ËÆ∑?≈Ù\]PÜøäIH<äápøJŸÉø¥ôû~v∂øp“—˝ﬁû´ø÷d◊££î?U„‰ˇ∏´?oB@æÑ•ø†IDÛ^áä?!»]^bèøÅQTg´8.øÈÀò£C∑¡?ÈF~g†?≥ZÅ!´Æ?Öç7±ë?≠LÛÏƒâø)◊∂0$∞?†v”ï?ÜëJ¨?fÛõ6°•?&îÉûòêø¢ı∏ªCîóø:?§c˜≤ßø¥k@Y8ú?–KFG“kàøı ‹~bõø;hÉí?˛ºoﬂ¢M?&][¡4·§ø¿k#‡9¢øíÅdÉJ1ßøpÅH‚å1´?≥±†ùƒ•?˜#ú¿ªì?ΩΩ6ﬁ«ñ?ñF'¶fjï?BZ[®‡O?4SƒcÎãë?ÍBïbìq†?–Ÿ˙–¢ ª?æ#e˙äfø|òﬁ<m£?üÈÌ‘à°øx∆]≈if?áàë·U/°?ºÅ%˛¯∞r?}¬Ç∆&üø0Œ†x?◊áçc8_†ølY!Y¶ø7Xﬂêèø#zÑ`vÀ¢?ˇ#ëÖÆ¢øOHﬂbM~¨øDøÛ·≠î?∑lˆ…Bë?J"• b?¬y6Äæ˙ò?∏∏+ìò¢èø»u¨Ç≥ºú?˙)o?wø|5ÑÜ•Qû?s(ËõŸSïøJ√ÈWLr?˝∑yÄzuúøñtÄüÚa®øè0‚kõøòÛ∂mRò?úV:∫r?ë?Ñé-6siΩ?aSO5fQÖ?XQÊì”¶±?Ú˜]°ß≤¨?P¿˙h∞ø¿£|˜}Ó§?ûq5@÷DÄøÅâÀ3'ßøÄ/ôÎ≥Q}ø‡∞S˝aÉç?k)b	R∆≠ø£`ﬂ±L}†? £≈`ò(≤øøh
∫jøên∆Zôø?}"TKhr?hæΩÓhòøáøB¿êø0˘—>)uø=m⁄rKQ?tôüΩ(¢?∞WTmö{?Óyaﬂ≤?Ù:˚-ÆØØ?"`ﬂw8ß?«±`®‰àø~%AÃÊà?É$ıﬂx˜v?PÌ‚”§øÉz§Fy©?⁄l⁄¸'Œ©øˆ\ú¥Mî?F≥á˝kg¢?J/<ø¿]†øqÈ5…—±?∫\∑—•ø˙h‚P—†ø_“÷ê—dè?©÷Òâƒ^Røö®ÙˇÈá¢ø˙ûT•tÉâ?ƒèJ]Ì`?.ŒMÿ‘2èøÕÁeﬂÿ]•?%Ç"*”ãø§#±ã?›Ü?37π¡KŒ∞?.çó"Ñ=ü?∂Ø∞ûbÓìø«πäp√üø°∏.ú?=fmAYróø≤¨π/©¶?\µG|‚ë™?ï’Ë‹©ZøíF¸bm¨øTW‘ù4nøÁ+báMò?ß˙˚∞—~c?4Ä&'˚¨@ø:—ú_gä?⁄∏!m≥Ç?0˝≈~óø¸ 9áâô?0qyÊƒ¢¢?„°äÈ~?yt˝dáVÅøÈªÜŸ˛ßú?¬Ì>3R∏?Q›@ß>∞?Ñ´ÚÛïˆ™?ø8~ù(êK?õZ‡Íc<øÏ§[2l°øæB¢≠£⁄éøö(+Nç?œZ¿∫‡¬òø[v õ™éøÍ¢Òª¢øì}?/5 #Åi•øÈ‡z√fHâ?ŒD«ƒúV§?¡¬0˝ûö´ø∏~/¬jÂ§?91‡Öà¥?ˆ/b+E©ø√¡9~Óàø&7Ä:¬¬Åø3<|Ì'™ø<KC^ÂÅr?~⁄îj Öøﬂäƒ5|∞?N®ñch+†ø?≤$uöø"£ÍÙdùøN‚/
€ã?wµò|ÜïøòRv~z®?÷√V[|øxº”·Dõáø‹.Ìﬁıíø"EÈéÇø*Ü ó?~?u˛„@Ï•≠?ˆûAxÒ‘îøΩE?è[åø!Á=‚àøW´ÉwJÎâø4Çã°ïes?ﬂ Ñ&¡œìø:s‰àÇÄøus3‘áî?á
$ö•Ç?—ˇéÇâ:≠?âë≈  5r?ì}æ ß?ò◊◊€‚Ò•?÷êóπÈdôøC5]Ê°?≠àXÃ!æøÀñ&tûø¢XﬁΩÚÆø!&˙ﬂæÃÆ?Ì›4√S?©ÕDÄÔå?¬∑%|3çô?ï2ΩÖÙbêøâc<Œ]‡∞?ÊÜöyV¯ôø ◊¡<c?ú :äÁ∞øÙ ˙£∆ââ?∏f";7ì?o©Ì†æ◊ãø§øàóV,êø8	®ÁKûø¸›Wø{B©?0í›Ìs? ÀOL9Çøz‡c∞‚Tüør¢Œ¨®ø≥ÇÜŒ–ç?Íî b6Ùü?Ú∂ö¡T=≠øI9üeÑçø„F∫4∏åáø?F>Ñ¯çë?⁄ãy˘<èa?Bìè†¢1∞øème˛€©¢?ï≈qûπ ∞?⁄)y÷πì?íkÈû¨…`øw°+§–ì?è&“éˇà?{^;b>j°?∏Aﬂ—W£?Ÿtb·¥xz?{m›ùô?c^(9Å? í8cLÖÜøΩb%!spø	∏¿KÆøcéËÑãøØ ﬂ;Ö©?VÚüµ´?˜CËwÃ¨?ız˙
Ñ±?«v∆cFÆøëÇoÊÃÄìø3•à÷•Ö?Q8b˝Ô¶?%ÒO4©øúT:â°ø;éª¿_?†Ù˙ùjP•øÉµU« å'?xr*!qÆ?„&ÑΩrÖ•øûﬂ~`ë÷§?¬ÜßW 2îøπ|V_~£µølıc∑y·:?tãoZˇdø•Å≠»<´ø˙`V~“∂Ö?é¯°•k°ø…s∫Ç&Ô¶øMæJÄíï?èÕÕ∏"ëù?¨‚©!S9è?I¡AÂŸ•ø—Èy7§øßõ˛À9°ëø=q˛˚ì≈á? bå™øÑ¥E ˛d{? Nıû©[íøLÆÉç/•øˇ ≠Ω9°ø-hÍ®KÉøÊ ?ñ?ª¶â<:Ç?L›j›”√ê?0Z˛~\€ñøüîcåíøWï‡Åøgì?VPªŸÀ(ë?⁄Ç<˝a?V÷ÇS)~ø"ˇiˆÇG™?Ú1Ì’¶5¨øf´Ó8Ñ?6}∫›r≈ö?Ä˘úØpø>†ÑA§?):É†Rûø¶SÒ[Å‹¢?õz8‹¢'Äømô°+ô±?$â?9Ûsüø'èªæ©ø+ÎÚ>rë¢?<pY{[çü?Zè#π
õ?Õ0∏]ù†®?S¢6ªˇŸò?¬G—æJ"¢?>F∂ ﬂ∑bøQ\N<yÓüø	ÛQX?ºÜ?BÁ+£ø‰QÌ}Òﬂ≠?≤ÄS ∂"p?–3Å§Ωúøç‹˚ùÎ–§?n”
ôLë±?ΩøïzÉ ó?®b5∑mp?oÙò›_qk?Rı0™øˆV'ﬁ6ê´?(õ
¢Ëß?÷i˙Ø_ü?7.&8‘ì?¡rBî•ø˛©õ®ã?ªs!âp)ç?'¸‹VMö?∞
Ök¶øMΩnÎ∞?Ø5\ÃˇÆøïˇc˝sê?t®S‹¿6çøWa⁄æAûø[yª˘‹˝Pø˙xˇW—Zøè8‡ D◊≤?yr≠<_rø∂‹WÌ≥-°?m'é_m´øπıÅÅsàÄ?Ω˜ª†S ûøÖ„”	á?Z ä≈ï—ï?™h'†‘R?3Ue=g?FI£]‡Mßøí≈[πßCHønkÍ¿b¢É?ﬁ˛'Bîv}?¯çØ=≥$ê?Ω`vb›◊xø-Ω™q>éï?~6G]8˛¢ø≠≈%æS?)ÂË_WõøN˝5πKí?ƒW÷^ç±p?øI”†hû∑øm¥w°à±øù$˝¿Ã¨ê?+›<YZã?∏À/àz?ó"Tì§øb=]˘ï?©ú˛Â*î?lFEoòø`º„r°ø∂Â–‡æ'ß?˚=‹ŒÒ„}øï◊•°°⁄ì?Ã†√Dœ¢ç?∑2çòlKüø!nüûYw?oØı⁄¶WÆø∞A6˚…9°øF+ˇ¶â?}\ŸÙ≥©?ΩØ1Tú?m˚+⁄´Åø&∫xâ≤øìôOyktø»[<)ÑÔÄ?|v|X»åí?; ‰{ïøzd*ˇÖﬁç?uÇÀùxRï?ÿ∞CÊﬁúøÔ—!på?Ä:óBﬂçøÀ«bY8bî?¶æ‹Å€NwøŸ]3í»ïø©%!¬-y?@ﬂ,’ò?$ˆ"=πdíø´&Çk¥µøú<]ƒ8©øGø´≠á?E˙–ß‹å?“[„†)ñøâøªœ–√£?á	ˆ°yπønT‰RVt?5®B´Øî?¶P7Éà#r?Ëò8aﬁΩ°?⁄!upÌöÖ?ë`ÒnA√ÇøÑ…}@⁄ﬁ®?ÛÀ—ºouø1#ëΩ´ù?bÒE¬ë§?h˝Ö◊[éø]aR`'´ø¿Œ,çÆ?«ñZ˘©Mï?c…åy”í?Ô˛≠ ◊C?hf™Écfî?Q"’Áäø8ÇpﬂLGµ?«…;ùu•?N`hsqìø∏^˘Ù$U?5´«ÍﬂêøáìGa»ö?ÇKÎbﬂΩ¶?fÅ˙ø∏éµø˜Øã&@‚µ?Ø9Õ#˚˜èøoó¢aL£?Âç*BÑs?¬§:W2á?CwÊqZËq?ı˜òxë?›„ÁÁœ|ô?;ÜK∑∫÷ùø5¶<«;ëø£6œ„¿C¶?$uÍ!çWsøö¬µ†≠?•√¸lG£?π–≥^Æsùø˘L™Aéi®ø’©%/»w?j™WH˚òøkÆùü+§?(3¸¨‘·x?TË9[ñ?ƒÚBïıˆñ?‘¶∆Xaãy?(¯Ëºfsuø¬Eâælê?!ûîebúä?~≤+ £®?w&7ª◊¨?|¶i‡ﬂQ§?Øˆ}™ùòø∫∞˙u?Y∞´ŒÄøïj;£6ñøgßGúå?;¨.Øu¢ø’Êœ11å?C™êA⁄>®?{ –ûmc£ø`ƒ»˝≈Ç?Æ‹;!¢êø∆àá‚\kuøµ@gD¸“ó?UôîH√•§øÊâ…ß,èøÉ]•üñ=≤øÚ®c['™û?Õ5í%ÔØøñêıB7∆<?œ¥§Hc°øò;È3VQÆø–v–:È™ø}ŒYvÛê?Ü]NËy¶?›Åßπ™¢?∆Öÿ†¸ÀòøïÂ0]úí?ì©Â{¥øóÈ4^¸e°?d-fÕçf?!d£÷ÆøT	’!≈mõøR,¿jqìø;:Fc‘¨ø	é&r”∑øˆ˘ ≤ÂË•øK{{æè¢ø
Œ	oIÌØø –¸ﬁd#ìøƒ∫&·òö?∫EGœT¢øéw&∏Å–îøπ”∆¶œÌ£?Ù˚]upÇ?ÛA	_∞øäw˝qÛêøÎÊE¿†ø*•ü$Ë%Ü? ì®Ò¥˜èø/…X;H°ø¨b‡ojVî?Á&ı[˜3ß?•Z‘ø’Në?óÕ√Ÿßø·VFjtèø8∏e°Lå•?Ñ «†≈¢?«v-5Æ?•‘]çw°ø‡Å÷≥0¨øG%≤ìj?5Ã3£›©øtßP‹•øÒ•*Lc§tøÌ‰∆H)Ü?+uY‰à…úø∆?¸îlÄøHåáør˘ù?Ìõ∫∞†û?(·‹;wv¢øâÒAü-øÜø3ó
‡dàø“ˆTÛ¡◊îøª0üö5Ú}øNÚ-X?…ıÑ_…ŸÑø∆%ŒW∑‰ö?åPÚ>ë™?$”¨ﬂ≈=øùçí‡ÿv¢øÎ&zﬁbÖ|?∏∫sìﬁX¢?]¨ë%ø∫ñøÄ¯F‡ëøO‹a{|.íø òÇπK∏øxMf¡fÆìø	{Ù5¥…Å?â/Ç∆LÜøÕo=Ø±ø~árâkÉ?`F‚°Ãõø
π‡yö≠{?t.Ω‰»ûøÌræñ_®ø`‚ÚÃâE}?Í8·ÿm∞ø¿*0«üf¢øP:Á`cÇó?HKœø◊s}?˙—≠-ıYÖøT⁄s}E’•?©∑‡L0±øeñ=Ï
tø…wÇ±Iê?`öÔŒDRÉøP¨à◊KõøCŒæú ÑòøÂ R„âã?p∞o€ÇõÑø¿ô__@z?Wk!˚2Æî?¢xÚ*©rø√Òæ"¶·©?€£(±4Ä?Àú:\ôÇøxXµ_œªóøYü>kyzøÎw?K∞§?ÖŸ÷ﬂ™ú¥?'ÚÇZú…îø!ñjÚ÷Òöøk»•“&é?,XŒ—ÔjEøn)ø√Ô—ìø¥ Äï>®øK)Í˜ΩÄîøî≠L˝^8†ø¬Í⁄¯˙ì?˜úâ#Ó5¢?Û{rªÄ?û¶JÔ§øZáE:swú?Õ_†„êøÂsı¬‡?ëõ(‹-ü?–<FöÙŒü?‘sˆ¡>©ßø˙+øg˚´?ò	˚ÄÑÑßøwÆ«˚s¸§?KªÿÅacûø˘ÁÉüÎW:?‰Úíäø@R∂€=_¶øÀ{ ¢fÇòø`ï;Œïò?)$ÂcÅÛâø.–~<•ó™?O(üyî•qøY“Ï‚™ø2gT›>Àe?AÕáj¡p?Ω"l6•ø—ZÄü97ö?s§LÕíæåøKÊïAnÏÆøÆä=¢¨Yôø L}eMHïø•¡¯vö?nàcó?≥C6
çø¸Œˇ«ö,]ø%À#a⁄ïÑ?Ω„jÇŒáøTàÏ(sò¥øLÌ ‡º^ä?À› ñ	}¶?!T˝ÿë€ò?éâZªi
∞øıaà_[ÜØøü:πS¯;•øe∫BÂÄŸ¢ø≤f∞ î?ºµ|ø˘Vùø@ö√Kˆ#É?⁄
ﬁ≥UÅ?˚Í˚á,™?ÆçFxZ¿?üΩ¯w°?J∏êGp#´ø^@àî»r?
cM]‡èúø/%:ÁÅqì?˜ª˚è?é…f7»^û?ß™ñï¢l|?á.nƒ•§ø Ï†–∫±?9rœ3r£?ÏØÊﬁçRø7û˝∏e÷îø¨Ëauü•øxıä§f⁄çø*Ä≠øG?∞úx_y∂•øò&I0âø]√©bl¥øTAV~:äønGñûy—p?Û≤Õ]∞Û]øk∂Ä='ï?9¢∞» ãøC˝a]rbó?ˆ†B£´‹≠?m‚’SZhá?µ∏ÇJµo?ø=N!ÕÉ?Ç•ÆƒŸ∑n?67	RÁYÜø˛ªx`V≥øΩ∫I]I*ù?SK∆sÆúøqA◊Ë≈¢?Í™HûN&îøÊ)≠èÏÅ?Â≤° )h£?QøÂì
Ñøt%êWÂù?ÑâäLQ?∑m\"æ„óøq∆ﬂﬂhå?˙ÉΩ#[°ø\Eazo∞øàSˇÉº‹£?-5MÉç?a”õ™´Å?¯Rua}‚eøõ!œ!µH?pE%·≤øô¢¥¢^?ô°≈l€ô?Ü√#ëÄúøÎí—˛êI°øNº≈Uµ?ÊFÀ`Åú?„'aË	îøØ}g¢?T¡õ“BøCp\∆MêøÈ#ïŒ,™?|_çˇ≠?P1M_oeØø}øJûËCß?´Òﬂé ≠øNxÉütIHøbSÒÅáø¯Uæ	≥@á?1ˆ
}CòøäSiŒ9Yø%∏YÁ]õ?a)D îÄµøóÄ•œLP?€∞R≥öΩä?«DU>gøM¿πòŸ≠øÓk>]∆ù? √¢≈KQ?ÖÚÂ’û1j?*zJHPnî?cRÆ∂Éç∞øHP_C.@≤ø>«'Óï?:ΩΩ1%êøÄªcÊ?ú?Ëî≤“≈"•ø}V¸Sh(ü?k’¶ó«ëø†\ŸYÇ˘Äøñﬁ'‹eûßø≤s¥Yﬁôøç0Ï ÌÊé?æ’π#ÅâøÚü@h’´øº¯ ®_ïø?p c∏˙møŒä√πHëdøî›ÄZ¨úøwü˚d`≥h?˘‘¢ºôøªÙ°ûM-|?LR,∆ﬂGö?À§¿·âI≥?; ZBvít?7~_^´˝§?ø≠w\≠áøÛâyòÓ¶?„Õ^Ÿ¨ ë?™	 `êóøŒ$»x£ø+b·}¥µøî„Aø^}•?C≥ﬂdt˚øïÔÕ˙äÒúøu˙ãÍæ≠•?L≠πçƒ•?√D¸Åz±?†œ@_åﬁçø  Ô°πXï?v*lH‘Ú§øïö=–
±?êc-6îw£?O u	˚çøïä… 0‹}ø√§~2TÆø9ÕßÄ?„              Û                      # X Layer Testnet Quick Start  The goal of this quick start guid9      [9      # X Layer Testnet Quick Start  The goal of this quick start guiek9      ´9                      9             [9             ´9             v   
content ˇˇˇˇˇˇˇˇˇ*string8
3vector ˇˇˇˇˇˇˇˇˇ*fixed_size_list:double:7688j
lance0.17.0z
lance0.1x   ˚s Ûq*l
0 ˇˇˇˇˇˇˇˇˇ*struct

null_count*int648
	min_value*string8
	max_value*string8 ªsu:         LANC